<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Controls.DataGrid</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Collections.PageChangingEventArgs">
            <summary>
            Event argument used for page index change notifications. The requested page move
            can be canceled by setting e.Cancel to True.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.PageChangingEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor that takes the target page index
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
        </member>
        <member name="P:Avalonia.Collections.PageChangingEventArgs.NewPageIndex">
            <summary>
            Gets the index of the requested page
            </summary>
        </member>
        <member name="T:Avalonia.Collections.IDataGridCollectionViewFactory">
            <summary>Defines a method that enables a collection to provide a custom view for specialized sorting, filtering, grouping, and currency.</summary>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionViewFactory.CreateView">
            <summary>Returns a custom view for specialized sorting, filtering, grouping, and currency.</summary>
            <returns>A custom view for specialized sorting, filtering, grouping, and currency.</returns>
        </member>
        <member name="T:Avalonia.Collections.DataGridCollectionView">
            <summary>
            DataGrid-readable view over an IEnumerable.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.uncancelableCurrentChangingEventArgs">
            <summary>
            Since there's nothing in the un-cancelable event args that is mutable,
            just create one instance to be used universally.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._cachedPageIndex">
            <summary>
            Value that we cache for the PageIndex if we are in a DeferRefresh,
            and the user has attempted to move to a different page.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._cachedPageSize">
            <summary>
            Value that we cache for the PageSize if we are in a DeferRefresh,
            and the user has attempted to change the PageSize.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._culture">
            <summary>
            CultureInfo used in this DataGridCollectionView
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._currentChangedMonitor">
            <summary>
            Private accessor for the Monitor we use to prevent recursion
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._currentItem">
            <summary>
            Private accessor for the CurrentItem
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._currentPosition">
            <summary>
            Private accessor for the CurrentPosition
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._deferLevel">
            <summary>
            The number of requests to defer Refresh()
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._editItem">
            <summary>
            The item we are currently editing
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._filter">
            <summary>
            Private accessor for the Filter
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._flags">
            <summary>
            Private accessor for the CollectionViewFlags
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._group">
            <summary>
            Private accessor for the Grouping data
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._internalList">
            <summary>
            Private accessor for the InternalList
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._isGrouping">
            <summary>
            Keeps track of whether groups have been applied to the
            collection already or not. Note that this can still be set
            to false even though we specify a GroupDescription, as the 
            collection may not have gone through the PrepareGroups function.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._isUsingTemporaryGroup">
            <summary>
            Private accessor for indicating whether we want to point to the temporary grouping data for calculations
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._itemConstructor">
            <summary>
            ConstructorInfo obtained from reflection for generating new items
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._itemConstructorIsValid">
            <summary>
            Whether we have the correct ConstructorInfo information for the ItemConstructor
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._newItem">
            <summary>
            The new item we are getting ready to add to the collection
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._pageIndex">
            <summary>
            Private accessor for the PageIndex
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._pageSize">
            <summary>
            Private accessor for the PageSize
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._pollForChanges">
            <summary>
            Whether the source needs to poll for changes
            (if it did not implement INotifyCollectionChanged)
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._sortDescriptions">
            <summary>
            Private accessor for the SortDescriptions
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._sourceCollection">
            <summary>
            Private accessor for the SourceCollection
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._temporaryGroup">
            <summary>
            Private accessor for the Grouping data on the entire collection
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._timestamp">
            <summary>
            Timestamp used to see if there was a collection change while 
            processing enumerator changes
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView._trackingEnumerator">
            <summary>
            Private accessor for the TrackingEnumerator
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Helper constructor that sets default values for isDataSorted and isDataInGroupOrder.
            </summary>
            <param name="source">The source for the collection</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.#ctor(System.Collections.IEnumerable,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DataGridCollectionView class.
            </summary>
            <param name="source">The source for the collection</param>
            <param name="isDataSorted">Determines whether the source is already sorted</param>
            <param name="isDataInGroupOrder">Whether the source is already in the correct order for grouping</param>
        </member>
        <member name="E:Avalonia.Collections.DataGridCollectionView.CollectionChanged">
            <summary>
            Raise this event when the (filtered) view changes
            </summary>
        </member>
        <member name="E:Avalonia.Collections.DataGridCollectionView.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            CollectionChanged event (per INotifyCollectionChanged).
            </summary>
        </member>
        <member name="E:Avalonia.Collections.DataGridCollectionView.CurrentChanged">
            <summary>
            Raised when the CurrentItem property changed
            </summary>
        </member>
        <member name="E:Avalonia.Collections.DataGridCollectionView.CurrentChanging">
            <summary>
            Raised when the CurrentItem property is changing
            </summary>
        </member>
        <member name="E:Avalonia.Collections.DataGridCollectionView.PageChanged">
            <summary>
            Raised when a page index change completed
            </summary>
        </member>
        <member name="E:Avalonia.Collections.DataGridCollectionView.PageChanging">
            <summary>
            Raised when a page index change is requested
            </summary>
        </member>
        <member name="E:Avalonia.Collections.DataGridCollectionView.PropertyChanged">
            <summary>
            PropertyChanged event.
            </summary>
        </member>
        <member name="E:Avalonia.Collections.DataGridCollectionView.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per INotifyPropertyChanged)
            </summary>
        </member>
        <member name="T:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags">
            <summary>
            Enum for CollectionViewFlags
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.IsDataInGroupOrder">
            <summary>
            Whether the list of items (after applying the sort and filters, if any) 
            is already in the correct order for grouping. 
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.IsDataSorted">
            <summary>
            Whether the source collection is already sorted according to the SortDescriptions collection
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.ShouldProcessCollectionChanged">
            <summary>
            Whether we should process the collection changed event
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.IsCurrentBeforeFirst">
            <summary>
            Whether the current item is before the first
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.IsCurrentAfterLast">
            <summary>
            Whether the current item is after the last
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.NeedsRefresh">
            <summary>
            Whether we need to refresh
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.CachedIsEmpty">
            <summary>
            Whether we cache the IsEmpty value
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.IsPageChanging">
            <summary>
            Indicates whether a page index change is in process or not
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.IsMoveToPageDeferred">
            <summary>
            Whether we need to move to another page after EndDefer
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CollectionViewFlags.IsUpdatePageSizeDeferred">
            <summary>
            Whether we need to update the PageSize after EndDefer
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CanAddNew">
            <summary>
            Gets a value indicating whether the view supports AddNew.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CanCancelEdit">
            <summary>
            Gets a value indicating whether the view supports the notion of "pending changes" 
            on the current edit item.  This may vary, depending on the view and the particular
            item.  For example, a view might return true if the current edit item
            implements IEditableObject, or if the view has special knowledge about 
            the item that it can use to support rollback of pending changes.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CanChangePage">
            <summary>
            Gets a value indicating whether the PageIndex value is allowed to change or not.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CanFilter">
            <summary>
            Gets a value indicating whether we support filtering with this ICollectionView.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CanGroup">
            <summary>
            Gets a value indicating whether this view supports grouping.
            When this returns false, the rest of the interface is ignored.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CanRemove">
            <summary>
            Gets a value indicating whether the view supports Remove and RemoveAt.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CanSort">
            <summary>
            Gets a value indicating whether we support sorting with this ICollectionView.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.Count">
            <summary>
            Gets the number of records in the view after 
            filtering, sorting, and paging.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.Culture">
            <summary>
            Gets or sets Culture to use during sorting.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CurrentAddItem">
            <summary>
            Gets the new item when an AddNew transaction is in progress
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CurrentEditItem">
            <summary>
            Gets the affected item when an EditItem transaction is in progress
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CurrentItem">
            <summary> 
            Gets the "current item" for this view 
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CurrentPosition">
            <summary>
            Gets the ordinal position of the CurrentItem within the 
            (optionally sorted and filtered) view.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.Filter">
            <summary>
            Gets or sets the Filter, which is a callback set by the consumer of the ICollectionView
            and used by the implementation of the ICollectionView to determine if an
            item is suitable for inclusion in the view.
            </summary>        
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support filtering and will throw a NotSupportedException.
            Use <seealso cref="P:Avalonia.Collections.DataGridCollectionView.CanFilter"/> property to test if filtering is supported before
            assigning a non-null value.
            </exception>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.Groups">
            <summary>
            Gets the top-level groups, constructed according to the descriptions
            given in GroupDescriptions.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsAddingNew">
            <summary>
            Gets a value indicating whether an "AddNew" transaction is in progress.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsCurrentAfterLast">
            <summary> 
            Gets a value indicating whether currency is beyond the end (End-Of-File). 
            </summary>
            <returns>Whether IsCurrentAfterLast</returns>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsCurrentBeforeFirst">
            <summary> 
            Gets a value indicating whether currency is before the beginning (Beginning-Of-File). 
            </summary>
            <returns>Whether IsCurrentBeforeFirst</returns>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an EditItem transaction is in progress.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsEmpty">
            <summary>
            Gets a value indicating whether the resulting (filtered) view is empty.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsPageChanging">
            <summary>
            Gets a value indicating whether a page index change is in process or not.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.ItemCount">
            <summary>
            Gets the minimum number of items known to be in the source collection
            that verify the current filter if any
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.NeedsRefresh">
            <summary>
            Gets a value indicating whether this view needs to be refreshed.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.PageIndex">
            <summary>
            Gets the current page we are on. (zero based)
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page. If the
            PageSize = 0, then we are not paging, and will display all items
            in the collection. Otherwise, we will have separate pages for 
            the items to display.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.SortDescriptions">
            <summary>
            Gets the Sort criteria to sort items in collection.
            </summary>
            <remarks>
            <p>
            Clear a sort criteria by assigning SortDescription.Empty to this property.
            One or more sort criteria in form of <seealso cref="T:Avalonia.Collections.DataGridSortDescription"/>
            can be used, each specifying a property and direction to sort by.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support sorting and will throw a NotSupportedException.
            Use <seealso cref="P:Avalonia.Collections.DataGridCollectionView.CanSort"/> property to test if sorting is supported before adding
            to SortDescriptions.
            </exception>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.SourceCollection">
            <summary>
            Gets the source of the IEnumerable collection we are using for our view.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.CanConstructItem">
            <summary>
            Gets a value indicating whether we have a valid ItemConstructor of the correct type
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.InternalCount">
            <summary>
            Gets the private count without taking paging or
            placeholders into account
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.InternalList">
            <summary>
            Gets the InternalList
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsCurrentInSync">
            <summary>
            Gets a value indicating whether CurrentItem and CurrentPosition are
            up-to-date with the state and content of the collection.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsCurrentInView">
            <summary>
            Gets a value indicating whether the current item is in the view
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsGrouping">
            <summary>
            Gets a value indicating whether or not we have grouping 
            taking place in this collection.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.IsRefreshDeferred">
            <summary>
            Gets a value indicating whether there
            is still an outstanding DeferRefresh in
            use.  If at all possible, derived classes
            should not call Refresh if IsRefreshDeferred
            is true.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.NeedToMoveToPreviousPage">
            <summary>
            Gets whether the current page is empty and we need
            to move to a previous page.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.OnLastLocalPage">
            <summary>
            Gets a value indicating whether we are on the last local page
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.PageCount">
            <summary>
            Gets the number of pages we currently have
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.RootGroup">
            <summary>
            Gets the root of the Group that we expose to the user
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.SourceList">
            <summary>
            Gets the SourceCollection as an IList
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.Timestamp">
            <summary>
            Gets Timestamp used by the NewItemAwareEnumerator to determine if a
            collection change has occurred since the enumerator began.  (If so,
            MoveNext should throw.)
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.UsesLocalArray">
            <summary>
            Gets a value indicating whether a private copy of the data 
            is needed for sorting, filtering, and paging. We want any deriving 
            classes to also be able to access this value to see whether or not 
            to use the default source collection, or the internal list.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.Item(System.Int32)">
            <summary>
            Return the item at the specified index
            </summary>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.AddNew">
            <summary>
            Add a new item to the underlying collection.  Returns the new item.
            After calling AddNew and changing the new item as desired, either
            CommitNew or CancelNew" should be called to complete the transaction.
            </summary>
            <returns>The new item we are adding</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CancelEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:Avalonia.Collections.DataGridCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are discarded.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CancelNew">
            <summary>
            Complete the transaction started by AddNew. The new
            item is removed from the collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CommitEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:Avalonia.Collections.DataGridCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are committed.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CommitNew">
            <summary>
            Complete the transaction started by AddNew. We follow the WPF
            convention in that the view's sort, filter, and paging
            specifications (if any) are applied to the new item.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.Contains(System.Object)">
            <summary>
            Return true if the item belongs to this view.  No assumptions are
            made about the item. This method will behave similarly to IList.Contains().
            If the caller knows that the item belongs to the
            underlying collection, it is more efficient to call PassesFilter.
            </summary>
            <param name="item">The item we are checking to see whether it is within the collection</param>
            <returns>Boolean value of whether or not the collection contains the item</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.DeferRefresh">
            <summary>
            Enter a Defer Cycle.
            Defer cycles are used to coalesce changes to the ICollectionView.
            </summary>
            <returns>IDisposable used to notify that we no longer need to defer, when we dispose</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.EditItem(System.Object)">
            <summary>
            Begins an editing transaction on the given item.  The transaction is
            completed by calling either CommitEdit or CancelEdit.  Any changes made 
            to the item during the transaction are considered "pending", provided 
            that the view supports the notion of "pending changes" for the given item.
            </summary>
            <param name="item">Item we want to edit</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.GetEnumerator">
            <summary> 
            Implementation of IEnumerable.GetEnumerator().
            This provides a way to enumerate the members of the collection
            without changing the currency.
            </summary>
            <returns>IEnumerator for the collection</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Interface Implementation for GetEnumerator()
            </summary>
            <returns>IEnumerator that we get from our internal collection</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.GetItemAt(System.Int32)">
            <summary>
            Retrieve item at the given zero-based index in this DataGridCollectionView, after the source collection
            is filtered, sorted, and paged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if index is out of range
            </exception>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>Item at specified index</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.IndexOf(System.Object)">
            <summary> 
            Return the index where the given item appears, or -1 if doesn't appear.
            </summary>
            <param name="item">Item we are searching for</param>
            <returns>Index of specified item</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveCurrentTo(System.Object)">
            <summary> 
            Move to the given item. 
            </summary>
            <param name="item">Item we want to move the currency to</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveCurrentToFirst">
            <summary> 
            Move to the first item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveCurrentToLast">
            <summary> 
            Move to the last item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveCurrentToNext">
            <summary> 
            Move to the next item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Move CurrentItem to this index
            </summary>
            <param name="position">Position we want to move the currency to</param>
            <returns>True if the resulting CurrentItem is an item within the view; otherwise False</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveCurrentToPrevious">
            <summary> 
            Move to the previous item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            The move is only attempted when TotalItemCount is known.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveToNextPage">
            <summary>
            Moves to the page after the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveToPage(System.Int32)">
            <summary>
            Requests a page move to page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">Index of the target page</param>
            <returns>Whether or not the move was successfully initiated.</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.PassesFilter(System.Object)">
            <summary>
            Return true if the item belongs to this view.  The item is assumed to belong to the
            underlying DataCollection;  this method merely takes filters into account.
            It is commonly used during collection-changed notifications to determine if the added/removed
            item requires processing.
            Returns true if no filter is set on collection view.
            </summary>
            <param name="item">The item to compare against the Filter</param>
            <returns>Whether the item passes the filter</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.Refresh">
            <summary>
            Re-create the view, using any SortDescriptions and/or Filters.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.Remove(System.Object)">
            <summary>
            Remove the given item from the underlying collection. It
            needs to be in the current filtered, sorted, and paged view
            to call 
            </summary>
            <param name="item">Item we want to remove</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the given index from the underlying collection.
            The index is interpreted with respect to the view (filtered, sorted,
            and paged list).
            </summary>
            <param name="index">Index of the item we want to remove</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.InvokePath(System.Object,System.String,System.Type)">
            <summary>
            Helper for SortList to handle nested properties (e.g. Address.Street)
            </summary>
            <param name="item">parent object</param>
            <param name="propertyPath">property names path</param>
            <param name="propertyType">property type that we want to check for</param>
            <returns>child object</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.AdjustCurrencyForAdd(System.Object,System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            </summary>
            <param name="newCurrentItem">Item that we want to set currency to</param>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.AdjustCurrencyForEdit(System.Object,System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            </summary>
            <param name="newCurrentItem">Item that we want to set currency to</param>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.AdjustCurrencyForRemove(System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            The index can be -1 if the item was removed from a previous page
            </summary>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CheckFlag(Avalonia.Collections.DataGridCollectionView.CollectionViewFlags)">
            <summary>
            Returns true if specified flag in flags is set.
            </summary>
            <param name="flags">Flag we are checking for</param>
            <returns>Whether the specified flag is set</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CompletePageMove(System.Int32)">
            <summary>
            Called to complete the page move operation to set the
            current page index.
            </summary>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.ConvertToInternalIndex(System.Int32)">
            <summary>
            Convert a value for the index passed in to the index it would be
            relative to the InternalIndex property.
            </summary>
            <param name="index">Index to convert</param>
            <returns>Value for the InternalIndex</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CopySourceToInternalList">
            <summary>
            Copy all items from the source collection to the internal list for processing.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.EndAddNew(System.Boolean)">
            <summary>
            Common functionality used by CommitNew, CancelNew, and when the
            new item is removed by Remove or Refresh.
            </summary>
            <param name="cancel">Whether we canceled the add</param>
            <returns>The new item we ended adding</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.EndDefer">
            <summary>
            Subtracts from the deferLevel counter and calls Refresh() if there are no other defers
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.EnsureItemConstructor">
            <summary>
            Makes sure that the ItemConstructor is set for the correct type
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.EnsureCollectionInSync">
            <summary>
             If the IEnumerable has changed, bring the collection up to date.
             (This isn't necessary if the IEnumerable is also INotifyCollectionChanged
             because we keep the collection in sync incrementally.)
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.GetItemType(System.Boolean)">
            <summary>
            Helper function used to determine the type of an item
            </summary>
            <param name="useRepresentativeItem">Whether we should use a representative item</param>
            <returns>The type of the items in the collection</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.GetRepresentativeItem">
            <summary>
            Gets a representative item from the collection
            </summary>
            <returns>An item that can represent the collection</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.InternalIndexOf(System.Object)">
            <summary>
            Return index of item in the internal list.
            </summary>
            <param name="item">The item we are checking</param>
            <returns>Integer value on where in the InternalList the object is located</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.InternalItemAt(System.Int32)">
            <summary>
            Return item at the given index in the internal list.
            </summary>
            <param name="index">The index we are checking</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OkToChangeCurrent">
            <summary>
            Ask listeners (via ICollectionView.CurrentChanging event) if it's OK to change currency
            </summary>
            <returns>False if a listener cancels the change, True otherwise</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Notify listeners that this View has changed
            </summary>
            <remarks>
                CollectionViews (and sub-classes) should take their filter/sort/grouping/paging
                into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">
                The NotifyCollectionChangedEventArgs to be passed to the EventHandler
            </param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OnCurrentChanged">
            <summary>
            Raises the CurrentChanged event
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OnCurrentChanging">
            <summary>
            Raise a CurrentChanging event that is not cancelable.
            This is called by CollectionChanges (Add, Remove, and Refresh) that 
            affect the CurrentItem.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OnCurrentChanging(Avalonia.Collections.DataGridCurrentChangingEventArgs)">
            <summary>
            Raises the CurrentChanging event
            </summary>
            <param name="args">
                CancelEventArgs used by the consumer of the event.  args.Cancel will
                be true after this call if the CurrentItem should not be changed for
                any reason.
            </param>
            <exception cref="T:System.InvalidOperationException">
                This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OnGroupByChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            GroupBy changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupBy has changed</param>
            <param name="e">Arguments for the NotifyCollectionChanged event</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OnGroupDescriptionChanged(System.Object,System.EventArgs)">
            <summary>
            GroupDescription changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupDescription has changed</param>
            <param name="e">Arguments for the GroupDescriptionChanged event</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="e">PropertyChangedEventArgs for this change</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event.
            </summary>
            <param name="propertyName">Property name for the property that changed</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.PrepareGroupingComparer(Avalonia.Collections.CollectionViewGroupRoot)">
            <summary>
            Sets up the ActiveComparer for the CollectionViewGroupRoot specified
            </summary>
            <param name="groupRoot">The CollectionViewGroupRoot</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.PrepareGroups">
            <summary>
            Use the GroupDescriptions to place items into their respective groups.
            This assumes that there is no paging, so we just group the entire collection
            of items that the CollectionView holds.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.PrepareTemporaryGroups">
            <summary>
            Use the GroupDescriptions to place items into their respective groups.
            Because of the fact that we have paging, it is possible that we are only
            going to need a subset of the items to be displayed. However, before we 
            actually group the entire collection, we can't display the items in the
            correct order. We therefore want to just create a temporary group with
            the entire collection, and then using this data we can create the group
            that is exposed with just the items we need.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.PrepareGroupsForCurrentPage">
            <summary>
            Update our Groups private accessor to point to the subset of data
            covered by the current page, or to display the entire group if paging is not
            being used.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.PrepareLocalArray(System.Collections.IEnumerable)">
            <summary>
            Create, filter and sort the local index array.
            called from Refresh(), override in derived classes as needed.
            </summary>
            <param name="enumerable">new IEnumerable to associate this view with</param>
            <returns>new local array to use for this view</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.ProcessAddEvent(System.Object,System.Int32)">
            <summary>
            Process an Add operation from an INotifyCollectionChanged event handler.
            </summary>
            <param name="addedItem">Item added to the source collection</param>
            <param name="addIndex">Index item was added into</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.ProcessCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Process CollectionChanged event on source collection 
            that implements INotifyCollectionChanged.
            </summary>
            <param name="args">
            The NotifyCollectionChangedEventArgs to be processed.
            </param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.ProcessRemoveEvent(System.Object,System.Boolean)">
            <summary>
            Process a Remove operation from an INotifyCollectionChanged event handler.
            </summary>
            <param name="removedItem">Item removed from the source collection</param>
            <param name="isReplace">Whether this was part of a Replace operation</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.ProcessInsertToCollection(System.Object,System.Int32)">
            <summary>
            Handles adding an item into the collection, and applying sorting, filtering, grouping, paging.
            </summary>
            <param name="item">Item to insert in the collection</param>
            <param name="index">Index to insert item into</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.RaiseCurrencyChanges(System.Boolean,System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Raises Currency Change events
            </summary>
            <param name="fireChangedEvent">Whether to fire the CurrentChanged event even if the parameters have not changed</param>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldCurrentPosition">CurrentPosition before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.RaisePageChanged">
            <summary>
            Raises the PageChanged event
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.RaisePageChanging(System.Int32)">
            <summary>
            Raises the PageChanging event
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
            <returns>True if the event is cancelled (e.Cancel was set to True), False otherwise</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.RefreshInternal">
            <summary>
            Will call RefreshOverride and clear the NeedsRefresh flag
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.RefreshOrDefer">
            <summary>
            Refresh, or mark that refresh is needed when defer cycle completes.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.RefreshOverride">
            <summary>
            Re-create the view, using any SortDescriptions. 
            Also updates currency information.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.ResetCurrencyValues(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Set currency back to the previous value it had if possible. If the item is no longer in view
            then either use the first item in the view, or if the list is empty, use null.
            </summary>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SetCurrent(System.Object,System.Int32)">
            <summary>
            Set CurrentItem and CurrentPosition, no questions asked!
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should use this method to update
            the Current values.
            </remarks>
            <param name="newItem">New CurrentItem</param>
            <param name="newPosition">New CurrentPosition</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SetCurrent(System.Object,System.Int32,System.Int32)">
            <summary>
            Set CurrentItem and CurrentPosition, no questions asked!
            </summary>
            <remarks>
            This method can be called from a constructor - it does not call
            any virtuals. The 'count' parameter is substitute for the real Count,
            used only when newItem is null.
            In that case, this method sets IsCurrentAfterLast to true if and only
            if newPosition >= count.  This distinguishes between a null belonging
            to the view and the dummy null when CurrentPosition is past the end.
            </remarks>
            <param name="newItem">New CurrentItem</param>
            <param name="newPosition">New CurrentPosition</param>
            <param name="count">Numbers of items in the collection</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SetCurrentToPosition(System.Int32)">
            <summary>
            Just move it. No argument check, no events, just move current to position.
            </summary>
            <param name="position">Position to move the current item to</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SetFlag(Avalonia.Collections.DataGridCollectionView.CollectionViewFlags,System.Boolean)">
            <summary>
            Sets the specified Flag(s)
            </summary>
            <param name="flags">Flags we want to set</param>
            <param name="value">Value we want to set these flags to</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SetSortDescriptions(Avalonia.Collections.DataGridSortDescriptionCollection)">
            <summary>
            Set new SortDescription collection; re-hook collection change notification handler
            </summary>
            <param name="descriptions">SortDescriptionCollection to set the property value to</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SortDescriptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            SortDescription was added/removed, refresh DataGridCollectionView
            </summary>
            <param name="sender">Sender that triggered this handler</param>
            <param name="e">NotifyCollectionChangedEventArgs for this change</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SortList(System.Collections.Generic.List{System.Object})">
            <summary>
            Sort the List based on the SortDescriptions property.
            </summary>
            <param name="list">List of objects to sort</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.VerifyRefreshNotDeferred">
            <summary>
            Helper to validate that we are not in the middle of a DeferRefresh
            and throw if that is the case.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.DataGridCollectionView.CultureSensitiveComparer">
            <summary>
            Creates a comparer class that takes in a CultureInfo as a parameter,
            which it will use when comparing strings.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.CultureSensitiveComparer._culture">
            <summary>
            Private accessor for the CultureInfo of our comparer
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CultureSensitiveComparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a comparer which will respect the CultureInfo
            that is passed in when comparing strings.
            </summary>
            <param name="culture">The CultureInfo to use in string comparisons</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.CultureSensitiveComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">first item to compare</param>
            <param name="y">second item to compare</param>
            <returns>Negative number if x is less than y, zero if equal, and a positive number if x is greater than y</returns>
            <remarks>
            Compares the 2 items using the specified CultureInfo for string and using the default object comparer for all other objects.
            </remarks>
        </member>
        <member name="T:Avalonia.Collections.DataGridCollectionView.DeferHelper">
            <summary>
            Used to keep track of Defer calls on the DataGridCollectionView, which
            will prevent the user from calling Refresh() on the view. In order
            to allow refreshes again, the user will have to call IDisposable.Dispose,
            to end the Defer operation.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.DeferHelper.collectionView">
            <summary>
            Private reference to the CollectionView that created this DeferHelper
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.DeferHelper.#ctor(Avalonia.Collections.DataGridCollectionView)">
            <summary>
            Initializes a new instance of the DeferHelper class
            </summary>
            <param name="collectionView">CollectionView that created this DeferHelper</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.DeferHelper.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="T:Avalonia.Collections.DataGridCollectionView.SimpleMonitor">
            <summary>
            A simple monitor class to help prevent re-entrant calls
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.SimpleMonitor.entered">
            <summary>
            Whether the monitor is entered
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.SimpleMonitor.Busy">
            <summary>
            Gets a value indicating whether we have been entered or not
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SimpleMonitor.Enter">
            <summary>
            Sets a value indicating that we have been entered
            </summary>
            <returns>Boolean value indicating whether we were already entered</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.SimpleMonitor.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="T:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator">
            <summary>
            IEnumerator generated using the new item taken into account
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator.Position.BeforeNewItem">
            <summary>
            Whether the position is before the new item
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator.Position.OnNewItem">
            <summary>
            Whether the position is on the new item that is being created
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator.Position.AfterNewItem">
            <summary>
            Whether the position is after the new item
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator.#ctor(Avalonia.Collections.DataGridCollectionView,System.Collections.IEnumerator,System.Object)">
            <summary>
            Initializes a new instance of the NewItemAwareEnumerator class.
            </summary>
            <param name="collectionView">The DataGridCollectionView we are creating the enumerator for</param>
            <param name="baseEnumerator">The baseEnumerator that we pass in</param>
            <param name="newItem">The new item we are adding to the collection</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator.MoveNext">
            <summary>
            Implements the MoveNext function for IEnumerable
            </summary>
            <returns>Whether we can move to the next item</returns>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator.Current">
            <summary>
            Gets the Current value for IEnumerable
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator.Reset">
            <summary>
            Implements the Reset function for IEnumerable
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator._collectionView">
            <summary>
            CollectionView that we are creating the enumerator for
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator._baseEnumerator">
            <summary>
            The Base Enumerator that we are passing in
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator._position">
            <summary>
            The position we are appending items to the enumerator
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator._newItem">
            <summary>
            Reference to any new item that we want to add to the collection
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionView.NewItemAwareEnumerator._timestamp">
            <summary>
            Timestamp to let us know whether there have been updates to the collection
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MergedComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">first item to compare</param>
            <param name="y">second item to compare</param>
            <returns>Negative number if x is less than y, zero if equal, and a positive number if x is greater than y</returns>
            <remarks>
            Compares the 2 items using the list of property names and directions.
            </remarks>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionView.MergedComparer.FindInsertIndex(System.Object,System.Collections.IList)">
            <summary>
            Steps through the given list using the comparer to find where
            to insert the specified item to maintain sorted order
            </summary>
            <param name="x">Item to insert into the list</param>
            <param name="list">List where we want to insert the item</param>
            <returns>Index where we should insert into</returns>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionViewGroupInternal._groupBy">
            <summary>
            GroupDescription used to define how to group the items
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionViewGroupInternal._parentGroup">
            <summary>
            Parent group of this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridCollectionViewGroupInternal._version">
            <summary>
            Used for detecting stale enumerators
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionViewGroupInternal.LastIndex">
            <summary>
            Gets or sets the most recent index where activity took place
            </summary>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionViewGroupInternal.SeedItem">
            <summary>
            Gets the first item (leaf) added to this group.  If this can't be determined,
            DependencyProperty.UnsetValue.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.Add(System.Object)">
            <summary>
            Adds the specified item to the collection
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.Clear">
            <summary>
            Clears the collection of items
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.FindIndex(System.Object,System.Object,System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Finds the index of the specified item
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <param name="low">Low range of item index</param>
            <param name="high">High range of item index</param>
            <returns>Index of the specified item</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.GetLeafEnumerator">
            <summary>
            Returns an enumerator over the leaves governed by this group
            </summary>
            <returns>Enumerator of leaves</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.Insert(System.Object,System.Object,System.Collections.IComparer)">
            <summary>
            Insert a new item or subgroup and return its index.  Seed is a
            representative from the subgroup (or the item itself) that
            is used to position the new item/subgroup w.r.t. the order given
            by the comparer. (If comparer is null, just add at the end).
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <returns>The index where the item was inserted</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafAt(System.Int32)">
            <summary>
            Return the item at the given index within the list of leaves governed
            by this group
            </summary>
            <param name="index">Index of the leaf</param>
            <returns>Item at given index</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafIndexFromItem(System.Object,System.Int32)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by the full group structure.  The item must be a (direct) child of this
            group.  The caller provides the index of the item within this group,
            if known, or -1 if not.
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="index">Index of the leaf</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafIndexOf(System.Object)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by this group
            </summary>
            <param name="item">Item we are looking for</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified item from the collection
            </summary>
            <param name="item">Item to remove</param>
            <param name="returnLeafIndex">Whether we want to return the leaf index</param>
            <returns>Leaf index where item was removed, if value was specified. Otherwise '-1'</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.RemoveEmptyGroup(Avalonia.Collections.DataGridCollectionViewGroupInternal)">
            <summary>
            Removes an empty group from the PagedCollectionView grouping
            </summary>
            <param name="group">Empty subgroup to remove</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.ChangeCounts(System.Object,System.Int32)">
            <summary>
            Update the item count of the CollectionViewGroup
            </summary>
            <param name="item">CollectionViewGroup to update</param>
            <param name="delta">Delta to change count by</param>
        </member>
        <member name="T:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafEnumerator">
            <summary>
            Enumerator for the leaves in the CollectionViewGroupInternal class.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafEnumerator.#ctor(Avalonia.Collections.DataGridCollectionViewGroupInternal)">
            <summary>
            Initializes a new instance of the LeafEnumerator class.
            </summary>
            <param name="group">CollectionViewGroupInternal that uses the enumerator</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafEnumerator.DoReset">
            <summary>
            Private helper to reset the enumerator
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Reset implementation for IEnumerator
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
            MoveNext implementation for IEnumerator
            </summary>
            <returns>Returns whether the MoveNext operation was successful</returns>
        </member>
        <member name="P:Avalonia.Collections.DataGridCollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current implementation for IEnumerator
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.ListComparer.#ctor(System.Collections.IList)">
            <summary>
            Constructor for the ListComparer that takes
            in an IList.
            </summary>
            <param name="list">IList used to compare on</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.ListComparer.Reset">
            <summary>
            Sets the index that we start comparing
            from to 0.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.ListComparer.ResetList(System.Collections.IList)">
            <summary>
            Sets our IList to a new instance
            of a list being passed in and resets
            the index.
            </summary>
            <param name="list">IList used to compare on</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.ListComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares objects x and y to see which one
            should appear first.
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns>-1 if x is less than y, +1 otherwise</returns>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.CollectionViewGroupComparer.#ctor(Avalonia.Collections.CollectionViewGroupRoot)">
            <summary>
            Constructor for the CollectionViewGroupComparer that takes
            in an CollectionViewGroupRoot.
            </summary>
            <param name="group">CollectionViewGroupRoot used to compare on</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.CollectionViewGroupComparer.Reset">
            <summary>
            Sets the index that we start comparing
            from to 0.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.CollectionViewGroupComparer.ResetGroup(Avalonia.Collections.CollectionViewGroupRoot)">
            <summary>
            Sets our group to a new instance of a
            CollectionViewGroupRoot being passed in
            and resets the index.
            </summary>
            <param name="group">CollectionViewGroupRoot used to compare on</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridCollectionViewGroupInternal.CollectionViewGroupComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares objects x and y to see which one
            should appear first.
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns>-1 if x is less than y, +1 otherwise</returns>
        </member>
        <member name="F:Avalonia.Collections.CollectionViewGroupRoot.RootName">
            <summary>
            String constant used for the Root Name
            </summary>
        </member>
        <member name="F:Avalonia.Collections.CollectionViewGroupRoot.UseAsItemDirectly">
            <summary>
            Private accessor for empty object instance
            </summary>
        </member>
        <member name="F:Avalonia.Collections.CollectionViewGroupRoot.topLevelGroupDescription">
            <summary>
            Private accessor for the top level GroupDescription
            </summary>
        </member>
        <member name="F:Avalonia.Collections.CollectionViewGroupRoot._groupBy">
            <summary>
            Private accessor for an ObservableCollection containing group descriptions
            </summary>
        </member>
        <member name="F:Avalonia.Collections.CollectionViewGroupRoot._isDataInGroupOrder">
            <summary>
            Indicates whether the list of items (after applying the sort and filters, if any) 
            is already in the correct order for grouping.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.CollectionViewGroupRoot._view">
            <summary>
            Private accessor for the owning ICollectionView
            </summary>
        </member>
        <member name="E:Avalonia.Collections.CollectionViewGroupRoot.CollectionChanged">
            <summary>
            Raise this event when the (grouped) view changes
            </summary>
        </member>
        <member name="E:Avalonia.Collections.CollectionViewGroupRoot.GroupDescriptionChanged">
            <summary>
            Raise this event when the GroupDescriptions change
            </summary>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.#ctor(Avalonia.Collections.IDataGridCollectionView,System.Boolean)">
            <summary>
            Initializes a new instance of the CollectionViewGroupRoot class.
            </summary>
            <param name="view">CollectionView that contains this grouping</param>
            <param name="isDataInGroupOrder">True if items are already in correct order for grouping</param>
        </member>
        <member name="P:Avalonia.Collections.CollectionViewGroupRoot.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.CollectionViewGroupRoot.ActiveComparer">
            <summary>
            Gets or sets the current IComparer being used
            </summary>
        </member>
        <member name="P:Avalonia.Collections.CollectionViewGroupRoot.Culture">
            <summary>
            Gets the culture to use during sorting.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.CollectionViewGroupRoot.IsDataInGroupOrder">
            <summary>
            Gets or sets a value indicating whether the data is in group order
            </summary>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.FindIndex(System.Object,System.Object,System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Finds the index of the specified item
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <param name="low">Low range of item index</param>
            <param name="high">High range of item index</param>
            <returns>Index of the specified item</returns>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.Initialize">
            <summary>
            Initializes the group descriptions
            </summary>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.InsertSpecialItem(System.Int32,System.Object,System.Boolean)">
            <summary>
            Inserts specified item into the collection
            </summary>
            <param name="index">Index to insert into</param>
            <param name="item">Item to insert</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notify listeners that this View has changed
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should take their filter/sort/grouping
            into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">The NotifyCollectionChangedEventArgs to be passed to the EventHandler</param>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.OnGroupByChanged">
            <summary>
            Notify host that a group description has changed somewhere in the tree
            </summary>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object)">
            <summary>
            Remove specified item from subgroups
            </summary>
            <param name="item">Item to remove</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Object)">
            <summary>
            Remove specified item from subgroups using an exhaustive search
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.RemoveSpecialItem(System.Int32,System.Object,System.Boolean)">
            <summary>
            Removes specified item into the collection
            </summary>
            <param name="index">Index to remove from</param>
            <param name="item">Item to remove</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Boolean)">
            <summary>
            Adds specified item to subgroups
            </summary>
            <param name="item">Item to add</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.AddToSubgroup(System.Object,Avalonia.Collections.DataGridCollectionViewGroupInternal,System.Int32,System.Object,System.Boolean)">
            <summary>
            Add an item to the subgroup with the given name
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping.</param>
            <param name="key">Name of subgroup to add to</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.AddToSubgroups(System.Object,Avalonia.Collections.DataGridCollectionViewGroupInternal,System.Int32,System.Boolean)">
            <summary>
            Add an item to the desired subgroup(s) of the given group
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.GetGroupDescription(Avalonia.Collections.DataGridCollectionViewGroup,System.Int32)">
            <summary>
            Returns the description of how to divide the given group into subgroups
            </summary>
            <param name="group">CollectionViewGroup to get group description from</param>
            <param name="level">The level of grouping</param>
            <returns>GroupDescription of how to divide the given group</returns>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.GetGroupKey(System.Object,Avalonia.Collections.DataGridGroupDescription,System.Int32)">
            <summary>
            Get the group name(s) for the given item
            </summary>
            <param name="item">Item to get group name for</param>
            <param name="groupDescription">GroupDescription for the group</param>
            <param name="level">The level of grouping</param>
            <returns>Group names for the specified item</returns>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.InitializeGroup(Avalonia.Collections.DataGridCollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Initialize the given group
            </summary>
            <param name="group">Group to initialize</param>
            <param name="level">The level of grouping</param>
            <param name="seedItem">The seed item to compare with to see where to insert</param>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.RemoveFromGroupDirectly(Avalonia.Collections.DataGridCollectionViewGroupInternal,System.Object)">
            <summary>
            Remove an item from the direct children of a group.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
            <returns>True if item could not be removed</returns>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.RemoveFromSubgroup(System.Object,Avalonia.Collections.DataGridCollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Remove an item from the subgroup with the given name.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <param name="key">Name of item to remove</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object,Avalonia.Collections.DataGridCollectionViewGroupInternal,System.Int32)">
            <summary>
            Remove an item from the desired subgroup(s) of the given group.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(Avalonia.Collections.DataGridCollectionViewGroupInternal,System.Object)">
            <summary>
            The item did not appear in one or more of the subgroups it
            was supposed to.  This can happen if the item's properties
            change so that the group names we used to insert it are
            different from the names used to remove it. If this happens,
            remove the item the hard way.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
        </member>
        <member name="T:Avalonia.Collections.CollectionViewGroupRoot.TopLevelGroupDescription">
            <summary>
            TopLevelGroupDescription class
            </summary>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.TopLevelGroupDescription.#ctor">
            <summary>
            Initializes a new instance of the TopLevelGroupDescription class.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.CollectionViewGroupRoot.TopLevelGroupDescription.GroupKeyFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            We have to implement this abstract method, but it should never be called
            </summary>
            <param name="item">Item to get group name from</param>
            <param name="level">The level of grouping</param>
            <param name="culture">Culture used for sorting</param>
            <returns>We do not return a value here</returns>
        </member>
        <member name="T:Avalonia.Collections.DataGridSortDescription.CultureSensitiveComparer">
            <summary>
            Creates a comparer class that takes in a CultureInfo as a parameter,
            which it will use when comparing strings.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.DataGridSortDescription.CultureSensitiveComparer._culture">
            <summary>
            Private accessor for the CultureInfo of our comparer
            </summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridSortDescription.CultureSensitiveComparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a comparer which will respect the CultureInfo
            that is passed in when comparing strings.
            </summary>
            <param name="culture">The CultureInfo to use in string comparisons</param>
        </member>
        <member name="M:Avalonia.Collections.DataGridSortDescription.CultureSensitiveComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">first item to compare</param>
            <param name="y">second item to compare</param>
            <returns>Negative number if x is less than y, zero if equal, and a positive number if x is greater than y</returns>
            <remarks>
            Compares the 2 items using the specified CultureInfo for string and using the default object comparer for all other objects.
            </remarks>
        </member>
        <member name="T:Avalonia.Collections.DataGridCurrentChangingEventArgs">
            <summary>Provides data for the <see cref="E:Avalonia.Collections.ICollectionView.CurrentChanging" /> event.</summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCurrentChangingEventArgs.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class and sets the <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property to true.</summary>
        </member>
        <member name="M:Avalonia.Collections.DataGridCurrentChangingEventArgs.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class and sets the <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property to the specified value.</summary>
            <param name="isCancelable">true to disable the ability to cancel a <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change; false to enable cancellation.</param>
        </member>
        <member name="P:Avalonia.Collections.DataGridCurrentChangingEventArgs.IsCancelable">
            <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change can be canceled. </summary>
            <returns>true if the event can be canceled; false if the event cannot be canceled.</returns>
        </member>
        <member name="P:Avalonia.Collections.DataGridCurrentChangingEventArgs.Cancel">
            <summary>Gets or sets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change should be canceled. </summary>
            <returns>true if the event should be canceled; otherwise, false. The default is false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property value is false.</exception>
        </member>
        <member name="T:Avalonia.Collections.IDataGridCollectionView">
            <summary>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.</summary>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.Culture">
            <summary>Gets or sets the cultural information for any operations of the view that may differ by culture, such as sorting.</summary>
            <returns>The culture information to use during culture-sensitive operations. </returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.Contains(System.Object)">
            <summary>Indicates whether the specified item belongs to this collection view. </summary>
            <returns>true if the item belongs to this collection view; otherwise, false.</returns>
            <param name="item">The object to check. </param>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.SourceCollection">
            <summary>Gets the underlying collection.</summary>
            <returns>The underlying collection.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.Filter">
            <summary>Gets or sets a callback that is used to determine whether an item is appropriate for inclusion in the view. </summary>
            <returns>A method that is used to determine whether an item is appropriate for inclusion in the view.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.CanFilter">
            <summary>Gets a value that indicates whether this view supports filtering by way of the <see cref="P:System.ComponentModel.ICollectionView.Filter" /> property.</summary>
            <returns>true if this view supports filtering; otherwise, false.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.SortDescriptions">
            <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> instances that describe how the items in the collection are sorted in the view.</summary>
            <returns>A collection of values that describe how the items in the collection are sorted in the view.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.CanSort">
            <summary>Gets a value that indicates whether this view supports sorting by way of the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> property.</summary>
            <returns>true if this view supports sorting; otherwise, false.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.CanGroup">
            <summary>Gets a value that indicates whether this view supports grouping by way of the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> property.</summary>
            <returns>true if this view supports grouping; otherwise, false.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.IsGrouping">
            <summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view. </summary>
            <returns>A collection of objects that describe how the items in the collection are grouped in the view. </returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.Groups">
            <summary>Gets the top-level groups.</summary>
            <returns>A read-only collection of the top-level groups or null if there are no groups.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.IsEmpty">
            <summary>Gets a value that indicates whether the view is empty.</summary>
            <returns>true if the view is empty; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.Refresh">
            <summary>Recreates the view.</summary>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.DeferRefresh">
            <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh. </summary>
            <returns>The typical usage is to create a using scope with an implementation of this method and then include multiple view-changing calls within the scope. The implementation should delay automatic refresh until after the using scope exits. </returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.CurrentItem">
            <summary>Gets the current item in the view.</summary>
            <returns>The current item in the view or null if there is no current item.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.CurrentPosition">
            <summary>Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
            <returns>The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.IsCurrentAfterLast">
            <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection.</summary>
            <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection; otherwise, false.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridCollectionView.IsCurrentBeforeFirst">
            <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the start of the collection.</summary>
            <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the start of the collection; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.MoveCurrentToFirst">
            <summary>Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
            <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.MoveCurrentToLast">
            <summary>Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
            <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.MoveCurrentToNext">
            <summary>Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
            <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.MoveCurrentToPrevious">
            <summary>Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view to the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
            <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.MoveCurrentTo(System.Object)">
            <summary>Sets the specified item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
            <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
            <param name="item">The item to set as the current item.</param>
        </member>
        <member name="M:Avalonia.Collections.IDataGridCollectionView.MoveCurrentToPosition(System.Int32)">
            <summary>Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
            <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
            <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> to.</param>
        </member>
        <member name="E:Avalonia.Collections.IDataGridCollectionView.CurrentChanging">
            <summary>Occurs before the current item changes.</summary>
        </member>
        <member name="E:Avalonia.Collections.IDataGridCollectionView.CurrentChanged">
            <summary>Occurs after the current item has been changed.</summary>
        </member>
        <member name="P:Avalonia.Collections.IDataGridEditableCollectionView.CanAddNew">
            <summary>Gets a value that indicates whether a new item can be added to the collection.</summary>
            <returns>true if a new item can be added to the collection; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridEditableCollectionView.AddNew">
            <summary>Adds a new item to the underlying collection.</summary>
            <returns>The new item that is added to the collection.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridEditableCollectionView.CommitNew">
            <summary>Ends the add transaction and saves the pending new item.</summary>
        </member>
        <member name="M:Avalonia.Collections.IDataGridEditableCollectionView.CancelNew">
            <summary>Ends the add transaction and discards the pending new item.</summary>
        </member>
        <member name="P:Avalonia.Collections.IDataGridEditableCollectionView.IsAddingNew">
            <summary>Gets a value that indicates whether an add transaction is in progress.</summary>
            <returns>true if an add transaction is in progress; otherwise, false.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridEditableCollectionView.CurrentAddItem">
            <summary>Gets the item that is being added during the current add transaction.</summary>
            <returns>The item that is being added if <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> is true; otherwise, null.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridEditableCollectionView.CanRemove">
            <summary>Gets a value that indicates whether an item can be removed from the collection.</summary>
            <returns>true if an item can be removed from the collection; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Collections.IDataGridEditableCollectionView.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified position from the collection.</summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:Avalonia.Collections.IDataGridEditableCollectionView.Remove(System.Object)">
            <summary>Removes the specified item from the collection.</summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Avalonia.Collections.IDataGridEditableCollectionView.EditItem(System.Object)">
            <summary>Begins an edit transaction on the specified item.</summary>
            <param name="item">The item to edit.</param>
        </member>
        <member name="M:Avalonia.Collections.IDataGridEditableCollectionView.CommitEdit">
            <summary>Ends the edit transaction and saves the pending changes.</summary>
        </member>
        <member name="M:Avalonia.Collections.IDataGridEditableCollectionView.CancelEdit">
            <summary>Ends the edit transaction and, if possible, restores the original value of the item.</summary>
        </member>
        <member name="P:Avalonia.Collections.IDataGridEditableCollectionView.CanCancelEdit">
            <summary>Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.</summary>
            <returns>true if the collection view can discard pending changes and restore the original values of an edited object; otherwise, false.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridEditableCollectionView.IsEditingItem">
            <summary>Gets a value that indicates whether an edit transaction is in progress.</summary>
            <returns>true if an edit transaction is in progress; otherwise, false.</returns>
        </member>
        <member name="P:Avalonia.Collections.IDataGridEditableCollectionView.CurrentEditItem">
            <summary>Gets the item in the collection that is being edited.</summary>
            <returns>The item that is being edited if <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> is true; otherwise, null.</returns>
        </member>
        <member name="T:Avalonia.Controls.DataGrid">
            <summary>
            Displays data in a customizable grid.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.DATAGRID_defaultColumnDisplayOrder">
            <summary>
            The default order to use for columns when there is no <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order"/>
            value available for the property.
            </summary>
            <remarks>
            The value of 10,000 comes from the DataAnnotations spec, allowing
            some properties to be ordered at the beginning and some at the end.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty">
            <summary>
            Identifies the CanUserReorderColumns dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.CanUserReorderColumns">
            <summary>
            Gets or sets a value that indicates whether the user can change
            the column display order by dragging column headers with the mouse.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty">
            <summary>
            Identifies the CanUserResizeColumns dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.CanUserResizeColumns">
            <summary>
            Gets or sets a value that indicates whether the user can adjust column widths using the mouse.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.CanUserSortColumnsProperty">
            <summary>
            Identifies the CanUserSortColumns dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.CanUserSortColumns">
            <summary>
            Gets or sets a value that indicates whether the user can sort columns by clicking the column header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty">
            <summary>
            Identifies the ColumnHeaderHeight dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.ColumnHeaderHeight">
            <summary>
            Gets or sets the height of the column headers row.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.ColumnWidthProperty">
            <summary>
            Identifies the ColumnWidth dependency property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.RowThemeProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.DataGrid.RowTheme"/> dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.RowTheme">
            <summary>
            Gets or sets the theme applied to all rows.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.CellThemeProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.DataGrid.CellTheme"/> dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.CellTheme">
            <summary>
            Gets or sets the theme applied to all cells.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.DataGrid.ColumnHeaderTheme"/> dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.ColumnHeaderTheme">
            <summary>
            Gets or sets the theme applied to all column headers.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.RowGroupThemeProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.DataGrid.RowGroupTheme"/> dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.RowGroupTheme">
            <summary>
            Gets or sets the theme applied to all row groups.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.ColumnWidth">
            <summary>
            Gets or sets the standard width or automatic sizing mode of columns in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.FrozenColumnCount">
            <summary>
            Gets or sets the number of columns that the user cannot scroll horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.GridLinesVisibility">
            <summary>
            Gets or sets a value that indicates which grid lines separating inner cells are shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.HeadersVisibility">
            <summary>
            Gets or sets a value that indicates the visibility of row and column headers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.HorizontalGridLinesBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating rows.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates how the horizontal scroll bar is displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.IsReadOnly">
            <summary>
            Gets or sets a value that indicates whether the user can edit the values in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozen">
            <summary>
            Gets or sets a value that indicates whether the row group header sections
            remain fixed at the width of the display area or can scroll horizontally.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.IsScrollInertiaEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DataGrid.IsScrollInertiaEnabled"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.IsScrollInertiaEnabled">
            <summary>
            Gets or sets whether scroll gestures should include inertia in their behavior and value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.MaxColumnWidth">
            <summary>
            Gets or sets the maximum width of columns in the <see cref="T:Avalonia.Controls.DataGrid" /> .
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.MinColumnWidth">
            <summary>
            Gets or sets the minimum width of columns in the <see cref="T:Avalonia.Controls.DataGrid" />.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.RowBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint row backgrounds.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.RowHeight">
            <summary>
            Gets or sets the standard height of rows in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.RowHeaderWidth">
            <summary>
            Gets or sets the width of the row header column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.SelectionMode">
            <summary>
            Gets or sets the selection behavior of the data grid.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.VerticalGridLinesBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating columns.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.VerticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates how the vertical scroll bar is displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.DropLocationIndicatorTemplate">
            <summary>
            Gets or sets the template that is used when rendering the column headers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.SelectedIndex">
            <summary>
            Gets or sets the index of the current selection.
            </summary>
            <returns>
            The index of the current selection, or -1 if the selection is empty.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.SelectedItem">
            <summary>
            Gets or sets the data item corresponding to the selected row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.ClipboardCopyMode">
            <summary>
            The property which determines how DataGrid content is copied to the Clipboard.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.AutoGenerateColumns">
            <summary>
            Gets or sets a value that indicates whether columns are created
            automatically when the <see cref="P:Avalonia.Controls.DataGrid.ItemsSource" /> property is set.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGrid.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.AreRowDetailsFrozen">
            <summary>
            Gets or sets a value that indicates whether the row details sections remain
            fixed at the width of the display area or can scroll horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.RowDetailsTemplate">
            <summary>
            Gets or sets the template that is used to display the content of the details section of rows.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.RowDetailsVisibilityMode">
            <summary>
            Gets or sets a value that indicates when the details sections of rows are displayed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGrid" /> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnItemsSourcePropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.AutoGeneratingColumn">
            <summary>
            Occurs one time for each public, non-static property in the bound data type when the
            <see cref="P:Avalonia.Controls.DataGrid.ItemsSource" /> property is changed and the
            <see cref="P:Avalonia.Controls.DataGrid.AutoGenerateColumns" /> property is true.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.BeginningEdit">
            <summary>
            Occurs before a cell or row enters editing mode.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.CellEditEnded">
            <summary>
            Occurs after cell editing has ended.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.CellEditEnding">
            <summary>
            Occurs immediately before cell editing has ended.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.CellPointerPressed">
            <summary>
            Occurs when cell is mouse-pressed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.ColumnDisplayIndexChanged">
            <summary>
            Occurs when the <see cref="P:Avalonia.Controls.DataGridColumn.DisplayIndex" />
            property of a column changes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.ColumnReordered">
            <summary>
            Raised when column reordering ends, to allow subscribers to clean up.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.ColumnReordering">
            <summary>
            Raised when starting a column reordering action.  Subscribers to this event can
            set tooltip and caret UIElements, constrain tooltip position, indicate that
            a preview should be shown, or cancel reordering.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.CurrentCellChanged">
            <summary>
            Occurs when a different cell becomes the current cell.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.LoadingRow">
            <summary>
            Occurs after a <see cref="T:Avalonia.Controls.DataGridRow" />
            is instantiated, so that you can customize it before it is used.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.PreparingCellForEdit">
             <summary>
             Occurs when a cell in a <see cref="T:Avalonia.Controls.DataGridTemplateColumn" /> enters editing mode.
            
             </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.RowEditEnded">
            <summary>
            Occurs when the row has been successfully committed or cancelled.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.RowEditEnding">
            <summary>
            Occurs immediately before the row has been successfully committed or cancelled.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.SelectionChanged">
            <summary>
            Occurs when the <see cref="P:Avalonia.Controls.DataGrid.SelectedItem" /> or
            <see cref="P:Avalonia.Controls.DataGrid.SelectedItems" /> property value changes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.Sorting">
            <summary>
            Occurs when the <see cref="T:Avalonia.Controls.DataGridColumn"/> sorting request is triggered.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.UnloadingRow">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.DataGridRow" />
            object becomes available for reuse.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.LoadingRowDetails">
            <summary>
            Occurs when a new row details template is applied to a row, so that you can customize
            the details section before it is used.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.RowDetailsVisibilityChanged">
            <summary>
            Occurs when the <see cref="P:Avalonia.Controls.DataGrid.RowDetailsVisibilityMode" />
            property value changes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.UnloadingRowDetails">
            <summary>
            Occurs when a row details element becomes available for reuse.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.Columns">
            <summary>
            Gets a collection that contains all the columns in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.CurrentColumn">
            <summary>
            Gets or sets the column that contains the current cell.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.SelectedItems">
            <summary>
            Gets a list that contains the data items corresponding to the selected rows.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.AutoSizingColumns">
            <summary>
            Indicates whether or not at least one auto-sizing column is waiting for all the rows
            to be measured before its final width is determined.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.UsesStarSizing">
            <summary>
            Indicates whether or not to use star-sizing logic.  If the DataGrid has infinite available space,
            then star sizing doesn't make sense.  In this case, all star columns grow to a predefined size of
            10,000 pixels in order to show the developer that star columns shouldn't be used.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.CurrentItem">
            <summary>
            Gets the data item bound to the row that contains the current cell.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.BeginEdit">
            <summary>
            Enters editing mode for the current cell and current row (if they're not already in editing mode).
            </summary>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.BeginEdit(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Enters editing mode for the current cell and current row (if they're not already in editing mode).
            </summary>
            <param name="editingEventArgs">Provides information about the user gesture that caused the call to BeginEdit. Can be null.</param>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CancelEdit">
            <summary>
            Cancels editing mode and restores the original value.
            </summary>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CancelEdit(Avalonia.Controls.DataGridEditingUnit)">
            <summary>
            Cancels editing mode for the specified DataGridEditingUnit and restores its original value.
            </summary>
            <param name="editingUnit">Specifies whether to cancel edit for a Cell or Row.</param>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CommitEdit">
            <summary>
            Commits editing mode and pushes changes to the backend.
            </summary>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CommitEdit(Avalonia.Controls.DataGridEditingUnit,System.Boolean)">
            <summary>
            Commits editing mode for the specified DataGridEditingUnit and pushes changes to the backend.
            </summary>
            <param name="editingUnit">Specifies whether to commit edit for a Cell or Row.</param>
            <param name="exitEditingMode">Editing mode is left if True.</param>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.ScrollIntoView(System.Object,Avalonia.Controls.DataGridColumn)">
            <summary>
            Scrolls the specified item or RowGroupHeader and/or column into view.
            If item is not null: scrolls the row representing the item into view;
            If column is not null: scrolls the column into view;
            If both item and column are null, the method returns without scrolling.
            </summary>
            <param name="item">an item from the DataGrid's items source or a CollectionViewGroup from the collection view</param>
            <param name="column">a column from the DataGrid's columns collection</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the content of the <see cref="T:Avalonia.Controls.DataGridRow" />.
            </summary>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
            <returns>
            The actual size used by the <see cref="T:Avalonia.Controls.DataGridRow" />.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the children of a <see cref="T:Avalonia.Controls.DataGridRow" /> to prepare for
            arranging them during the
            <see cref="M:Avalonia.Controls.DataGridRow.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <returns>
            The size that the <see cref="T:Avalonia.Controls.DataGridRow" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that
            child elements should not exceed.
            </param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnDataContextBeginUpdate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnDataContextEndUpdate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnBeginningEdit(Avalonia.Controls.DataGridBeginningEditEventArgs)">
            <summary>
            Raises the BeginningEdit event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnCellEditEnded(Avalonia.Controls.DataGridCellEditEndedEventArgs)">
            <summary>
            Raises the CellEditEnded event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnCellEditEnding(Avalonia.Controls.DataGridCellEditEndingEventArgs)">
            <summary>
            Raises the CellEditEnding event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnCellPointerPressed(Avalonia.Controls.DataGridCellPointerPressedEventArgs)">
            <summary>
            Raises the CellPointerPressed event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnCurrentCellChanged(System.EventArgs)">
            <summary>
            Raises the CurrentCellChanged event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnLoadingRow(Avalonia.Controls.DataGridRowEventArgs)">
            <summary>
            Raises the LoadingRow event for row preparation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <summary>
            Scrolls the DataGrid according to the direction of the delta.
            </summary>
            <param name="e">PointerWheelEventArgs</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnPreparingCellForEdit(Avalonia.Controls.DataGridPreparingCellForEditEventArgs)">
            <summary>
            Raises the PreparingCellForEdit event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnRowEditEnded(Avalonia.Controls.DataGridRowEditEndedEventArgs)">
            <summary>
            Raises the RowEditEnded event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnRowEditEnding(Avalonia.Controls.DataGridRowEditEndingEventArgs)">
            <summary>
            Raises the RowEditEnding event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnSelectionChanged(Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the SelectionChanged event and clears the _selectionChanged.
            This event won't get raised again until after _selectionChanged is set back to true.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnUnloadingRow(Avalonia.Controls.DataGridRowEventArgs)">
            <summary>
            Raises the UnloadingRow event for row recycling.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGrid.DisplayIndexComparer">
            <summary>
            Comparator class so we can sort list by the display index
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the column header when a new template is applied.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CancelEdit(Avalonia.Controls.DataGridEditingUnit,System.Boolean)">
            <summary>
            Cancels editing mode for the specified DataGridEditingUnit and restores its original value.
            </summary>
            <param name="editingUnit">Specifies whether to cancel edit for a Cell or Row.</param>
            <param name="raiseEvents">Specifies whether or not to raise editing events</param>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CoerceSelectedItem">
            <summary>
            call when: selection changes or SelectedItems object changes
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.ProcessSelectionAndCurrency(System.Int32,System.Object,System.Int32,Avalonia.Controls.DataGridSelectionAction,System.Boolean)">
            <summary>
            Selects items and updates currency based on parameters
            </summary>
            <param name="columnIndex">column index to make current</param>
            <param name="item">data item or CollectionViewGroup to make current</param>
            <param name="backupSlot">slot to use in case the item is no longer valid</param>
            <param name="action">selection action to perform</param>
            <param name="scrollIntoView">whether or not the new current item should be scrolled into view</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.WaitForLostFocus(System.Action)">
             <summary>
             If the editing element has focus, this method will set focus to the DataGrid itself
             in order to force the element to lose focus.  It will then wait for the editing element's
             LostFocus event, at which point it will perform the specified action.
            
             NOTE: It is important to understand that the specified action will be performed when the editing
             element loses focus only if this method returns true.  If it returns false, then the action
             will not be performed later on, and should instead be performed by the caller, if necessary.
             </summary>
             <param name="action">Action to perform after the editing element loses focus</param>
             <returns>True if the editing element had focus and the action was cached away; false otherwise</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnLoadingRowDetails(Avalonia.Controls.DataGridRowDetailsEventArgs)">
            <summary>
            Raises the LoadingRowDetails for row details preparation
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnUnloadingRowDetails(Avalonia.Controls.DataGridRowDetailsEventArgs)">
            <summary>
            Raises the UnloadingRowDetails event
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.EditingElement_LostFocus(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the current editing element's LostFocus event by performing any actions that
            were cached by the WaitForLostFocus method.
            </summary>
            <param name="sender">Editing element</param>
            <param name="e">RoutedEventArgs</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.ExitEdit(System.Boolean)">
            <summary>
            Exits editing mode without trying to commit or revert the editing, and
            without repopulating the edited row's cell.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GetGroupFromItem(System.Object,System.Int32)">
            <summary>
            Returns the Group at the indicated level or null if the item is not in the ItemsSource
            </summary>
            <param name="item">item</param>
            <param name="groupLevel">groupLevel</param>
            <returns>The group the given item falls under or null if the item is not in the ItemsSource</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnLoadingRowGroup(Avalonia.Controls.DataGridRowGroupHeaderEventArgs)">
            <summary>
            Raises the LoadingRowGroup event
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnUnloadingRowGroup(Avalonia.Controls.DataGridRowGroupHeaderEventArgs)">
            <summary>
            Raises the UnLoadingRowGroup event
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.LoadingRowGroup">
            <summary>
            Occurs before a DataGridRowGroupHeader header is used.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.UnloadingRowGroup">
            <summary>
            Occurs when the DataGridRowGroupHeader is available for reuse.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DataGrid.CopyingRowClipboardContent">
            <summary>
            This event is raised by OnCopyingRowClipboardContent method after the default row content is prepared.
            Event listeners can modify or add to the row clipboard content.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnCopyingRowClipboardContent(Avalonia.Controls.DataGridRowClipboardEventArgs)">
            <summary>
            This method raises the CopyingRowClipboardContent event.
            </summary>
            <param name="e">Contains the necessary information for generating the row clipboard content.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.FormatClipboardContent(Avalonia.Controls.DataGridRowClipboardEventArgs)">
            <summary>
            This method formats a row (specified by a DataGridRowClipboardEventArgs) into
            a single string to be added to the Clipboard when the DataGrid is copying its contents.
            </summary>
            <param name="e">DataGridRowClipboardEventArgs</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.ProcessCopyKey(Avalonia.Input.KeyModifiers)">
            <summary>
            Handles the case where a 'Copy' key ('C' or 'Insert') has been pressed.  If pressed in combination with
            the control key, and the necessary prerequisites are met, the DataGrid will copy its contents
            to the Clipboard as text.
            </summary>
            <returns>Whether or not the DataGrid handled the key press.</returns>
        </member>
        <member name="P:Avalonia.Controls.DataGrid.ClipboardContentControl">
            <summary>
            This is an empty content control that's used during the DataGrid's copy procedure
            to determine the value of a ClipboardContentBinding for a particular column and item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnAutoGeneratingColumn(Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs)">
            <summary>
            Raises the AutoGeneratingColumn event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.AdjustColumnWidths(System.Int32,System.Double,System.Boolean)">
            <summary>
            Adjusts the widths of all columns with DisplayIndex >= displayIndex such that the total
            width is adjusted by the given amount, if possible.  If the total desired adjustment amount
            could not be met, the remaining amount of adjustment is returned.
            </summary>
            <param name="displayIndex">Starting column DisplayIndex.</param>
            <param name="amount">Adjustment amount (positive for increase, negative for decrease).</param>
            <param name="userInitiated">Whether or not this adjustment was initiated by a user action.</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.AutoSizeColumn(Avalonia.Controls.DataGridColumn,System.Double)">
            <summary>
            Grows an auto-column's width to the desired width.
            </summary>
            <param name="column">Auto-column to adjust.</param>
            <param name="desiredWidth">The new desired width of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.DecreaseColumnWidths(System.Int32,System.Double,System.Boolean)">
            <summary>
            Decreases the widths of all columns with DisplayIndex >= displayIndex such that the total
            width is decreased by the given amount, if possible.  If the total desired adjustment amount
            could not be met, the remaining amount of adjustment is returned.
            </summary>
            <param name="displayIndex">Starting column DisplayIndex.</param>
            <param name="amount">Amount to decrease (in pixels).</param>
            <param name="userInitiated">Whether or not this adjustment was initiated by a user action.</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.IncreaseColumnWidths(System.Int32,System.Double,System.Boolean)">
            <summary>
            Increases the widths of all columns with DisplayIndex >= displayIndex such that the total
            width is increased by the given amount, if possible.  If the total desired adjustment amount
            could not be met, the remaining amount of adjustment is returned.
            </summary>
            <param name="displayIndex">Starting column DisplayIndex.</param>
            <param name="amount">Amount of increase (in pixels).</param>
            <param name="userInitiated">Whether or not this adjustment was initiated by a user action.</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnColumnCanUserResizeChanged(Avalonia.Controls.DataGridColumn)">
            <summary>
            Invalidates the widths of all columns because the resizing behavior of an individual column has changed.
            </summary>
            <param name="column">Column with CanUserResize property that has changed.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnColumnMaxWidthChanged(Avalonia.Controls.DataGridColumn,System.Double)">
            <summary>
            Adjusts the specified column's width according to its new maximum value.
            </summary>
            <param name="column">The column to adjust.</param>
            <param name="oldValue">The old ActualMaxWidth of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnColumnMinWidthChanged(Avalonia.Controls.DataGridColumn,System.Double)">
            <summary>
            Adjusts the specified column's width according to its new minimum value.
            </summary>
            <param name="column">The column to adjust.</param>
            <param name="oldValue">The old ActualMinWidth of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.RefreshColumnElements(Avalonia.Controls.DataGridColumn,System.String)">
            <summary>
            Called when a column property changes, and its cells need to 
            adjust that that column change.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.AdjustStarColumnWidths(System.Int32,System.Double,System.Boolean)">
            <summary>
            Adjusts the widths of all star columns with DisplayIndex >= displayIndex such that the total
            width is adjusted by the given amount, if possible.  If the total desired adjustment amount
            could not be met, the remaining amount of adjustment is returned.
            </summary>
            <param name="displayIndex">Starting column DisplayIndex.</param>
            <param name="adjustment">Adjustment amount (positive for increase, negative for decrease).</param>
            <param name="userInitiated">Whether or not this adjustment was initiated by a user action.</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.AdjustStarColumnWidths(System.Int32,System.Double,System.Boolean,System.Func{Avalonia.Controls.DataGridColumn,System.Double})">
            <summary>
            Adjusts the widths of all star columns with DisplayIndex >= displayIndex such that the total
            width is adjusted by the given amount, if possible.  If the total desired adjustment amount
            could not be met, the remaining amount of adjustment is returned.  The columns will stop adjusting
            once they hit their target widths.
            </summary>
            <param name="displayIndex">Starting column DisplayIndex.</param>
            <param name="remainingAdjustment">Adjustment amount (positive for increase, negative for decrease).</param>
            <param name="userInitiated">Whether or not this adjustment was initiated by a user action.</param>
            <param name="targetWidth">The target width of the column.</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.DecreaseNonStarColumnWidth(Avalonia.Controls.DataGridColumn,System.Double,System.Double)">
            <summary>
            Decreases the width of a non-star column by the given amount, if possible.  If the total desired
            adjustment amount could not be met, the remaining amount of adjustment is returned.  The adjustment
            stops when the column's target width has been met.
            </summary>
            <param name="column">Column to adjust.</param>
            <param name="targetWidth">The target width of the column (in pixels).</param>
            <param name="amount">Amount to decrease (in pixels).</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.DecreaseNonStarColumnWidths(System.Int32,System.Func{Avalonia.Controls.DataGridColumn,System.Double},System.Double,System.Boolean,System.Boolean)">
            <summary>
            Decreases the widths of all non-star columns with DisplayIndex >= displayIndex such that the total
            width is decreased by the given amount, if possible.  If the total desired adjustment amount
            could not be met, the remaining amount of adjustment is returned.  The adjustment stops when
            the column's target width has been met.
            </summary>
            <param name="displayIndex">Starting column DisplayIndex.</param>
            <param name="targetWidth">The target width of the column (in pixels).</param>
            <param name="amount">Amount to decrease (in pixels).</param>
            <param name="reverse">Whether or not to reverse the order in which the columns are traversed.</param>
            <param name="affectNewColumns">Whether or not to adjust widths of columns that do not yet have their initial desired width.</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GetColumnXFromIndex(System.Int32)">
            <devdoc>
                 Returns the absolute coordinate of the left edge of the given column (including
                 the potential gridline - that is the left edge of the gridline is returned). Note that
                 the column does not need to be in the display area.
            </devdoc>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.IncreaseNonStarColumnWidth(Avalonia.Controls.DataGridColumn,System.Double,System.Double)">
            <summary>
            Increases the width of a non-star column by the given amount, if possible.  If the total desired
            adjustment amount could not be met, the remaining amount of adjustment is returned.  The adjustment
            stops when the column's target width has been met.
            </summary>
            <param name="column">Column to adjust.</param>
            <param name="targetWidth">The target width of the column (in pixels).</param>
            <param name="amount">Amount to increase (in pixels).</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.IncreaseNonStarColumnWidths(System.Int32,System.Func{Avalonia.Controls.DataGridColumn,System.Double},System.Double,System.Boolean,System.Boolean)">
            <summary>
            Increases the widths of all non-star columns with DisplayIndex >= displayIndex such that the total
            width is increased by the given amount, if possible.  If the total desired adjustment amount
            could not be met, the remaining amount of adjustment is returned.  The adjustment stops when
            the column's target width has been met.
            </summary>
            <param name="displayIndex">Starting column DisplayIndex.</param>
            <param name="targetWidth">The target width of the column (in pixels).</param>
            <param name="amount">Amount to increase (in pixels).</param>
            <param name="reverse">Whether or not to reverse the order in which the columns are traversed.</param>
            <param name="affectNewColumns">Whether or not to adjust widths of columns that do not yet have their initial desired width.</param>
            <returns>The remaining amount of adjustment.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.ClearRowSelection(System.Boolean)">
            <summary>
            Clears the entire selection. Displayed rows are deselected explicitly to visualize
            potential transition effects
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.ClearRowSelection(System.Int32,System.Boolean)">
            <summary>
            Clears the entire selection except the indicated row. Displayed rows are deselected explicitly to
            visualize potential transition effects. The row indicated is selected if it is not already.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GetRowFromItem(System.Object)">
            <summary>
            Returns the row associated to the provided backend data item.
            </summary>
            <param name="dataItem">backend data item</param>
            <returns>null if the DataSource is null, the provided item in not in the source, or the item is not displayed; otherwise, the associated Row</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CorrectSlotsAfterDeletion(System.Int32,System.Boolean)">
            <summary>
            Adjusts the index of all displayed, loaded and edited rows after a row was deleted.
            Removes the deleted row from the list of loaded rows if present.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CorrectSlotsAfterInsertion(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adjusts the index of all displayed, loaded and edited rows after rows were deleted.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GenerateEditingElements">
            <summary>
            Creates all the editing elements for the current editing row, so the bindings
            all exist during validation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GenerateRow(System.Int32,System.Int32)">
            <summary>
            Returns a row for the provided index. The row gets first loaded through the LoadingRow event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GenerateRow(System.Int32,System.Int32,System.Object)">
            <summary>
            Returns a row for the provided index. The row gets first loaded through the LoadingRow event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GetExactSlotElementHeight(System.Int32)">
            <summary>
            Returns the exact row height, whether it is currently displayed or not.
            The row is generated and added to the displayed rows in case it is not already displayed.
            The horizontal gridlines thickness are added.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GetSlotElementHeight(System.Int32)">
            <summary>
            If the provided slot is displayed, returns the exact height.
            If the slot is not displayed, returns a default height.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GetSlotElementsHeight(System.Int32,System.Int32)">
            <summary>
            Cumulates the approximate height of the rows from fromRowIndex to toRowIndex included.
            Including the potential gridline thickness.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.GetGeneratedRow(System.Object)">
            <summary>
            Checks if the row for the provided dataContext has been generated and is present
            in either the loaded rows, pre-fetched rows, or editing row.
            The displayed rows are *not* searched. Returns null if the row does not belong to those 3 categories.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.RemoveEditingElements">
            <summary>
            Removes all of the editing elements for the row that is just leaving editing mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.SlotIsDisplayed(System.Int32)">
            <summary>
            Determines whether the row at the provided index must be displayed or not.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.CollapseRowGroup(Avalonia.Collections.DataGridCollectionViewGroup,System.Boolean)">
            <summary>
            Collapses the DataGridRowGroupHeader that represents a given CollectionViewGroup
            </summary>
            <param name="collectionViewGroup">CollectionViewGroup</param>
            <param name="collapseAllSubgroups">Set to true to collapse all Subgroups</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.ExpandRowGroup(Avalonia.Collections.DataGridCollectionViewGroup,System.Boolean)">
            <summary>
            Expands the DataGridRowGroupHeader that represents a given CollectionViewGroup
            </summary>
            <param name="collectionViewGroup">CollectionViewGroup</param>
            <param name="expandAllSubgroups">Set to true to expand all Subgroups</param>
        </member>
        <member name="M:Avalonia.Controls.DataGrid.OnRowDetailsVisibilityChanged(Avalonia.Controls.DataGridRowDetailsEventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.DataGrid.RowDetailsVisibilityChanged" /> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Avalonia.Controls.DataGridBoundColumn">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.DataGrid" /> column that can 
            bind to a property in the grid's data source.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridBoundColumn.Binding">
            <summary>
            Gets or sets the binding that associates the column with a property in the data source.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridBoundColumn.ClipboardContentBinding">
            <summary>
            The binding that will be used to get or set cell content for the clipboard.
            If the base ClipboardContentBinding is not explicitly set, this will return the value of Binding.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridCell">
            <summary>
            Represents an individual <see cref="T:Avalonia.Controls.DataGrid" /> cell.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridCell.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the cell control when a new template is applied.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridCheckBoxColumn">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts 
            <see cref="T:System.Windows.Controls.CheckBox" /> controls in its cells.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridCheckBoxColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridCheckBoxColumn" /> class. 
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridCheckBoxColumn.IsThreeStateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DataGridCheckBoxColumn.IsThreeState"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridCheckBoxColumn.IsThreeState">
            <summary>
            Gets or sets a value that indicates whether the hosted <see cref="T:System.Windows.Controls.CheckBox" /> controls allow three states or two. 
            </summary>
            <returns>
            true if the hosted controls support three states; false if they support two states. The default is false. 
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridCheckBoxColumn.CancelCellEdit(Avalonia.Controls.Control,System.Object)">
            <summary>
            Causes the column cell being edited to revert to the specified value.
            </summary>
            <param name="editingElement">
            The element that the column displays for a cell in editing mode.
            </param>
            <param name="uneditedValue">
            The previous, unedited value in the cell being edited.
            </param>
        </member>
        <member name="M:Avalonia.Controls.DataGridCheckBoxColumn.GenerateEditingElementDirect(Avalonia.Controls.DataGridCell,System.Object)">
             <summary>
             Gets a <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
             </summary>
             <param name="cell">
             The cell that will contain the generated element.
             </param>
             <param name="dataItem">
             The data item represented by the row that contains the intended cell.
            </param>
             <returns>
             A new <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
             </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridCheckBoxColumn.GenerateElement(Avalonia.Controls.DataGridCell,System.Object)">
            <summary>                
            Gets a read-only <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">
            The cell that will contain the generated element.
            </param>
            <param name="dataItem">
            The data item represented by the row that contains the intended cell.
            </param>
            <returns>
            A new, read-only <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridCheckBoxColumn.PrepareCellForEdit(Avalonia.Controls.Control,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a cell in the column enters editing mode.
            </summary>
            <param name="editingElement">
            The element that the column displays for a cell in editing mode.
            </param>
            <param name="editingEventArgs">
            Information about the user gesture that is causing a cell to enter editing mode.
            </param>
            <returns>
            The unedited value. 
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridCheckBoxColumn.RefreshCellContent(Avalonia.Controls.Control,System.String)">
            <summary>
            Called by the DataGrid control when this column asks for its elements to be
            updated, because its CheckBoxContent or IsThreeState property changed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridClipboardCopyMode">
            <summary>
            Defines modes that indicates how DataGrid content is copied to the Clipboard. 
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridClipboardCopyMode.None">
            <summary>
            Disable the DataGrid's ability to copy selected items as text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridClipboardCopyMode.ExcludeHeader">
            <summary>
            Enable the DataGrid's ability to copy selected items as text, but do not include
            the column header content as the first line in the text that gets copied to the Clipboard.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridClipboardCopyMode.IncludeHeader">
            <summary>
            Enable the DataGrid's ability to copy selected items as text, and include
            the column header content as the first line in the text that gets copied to the Clipboard.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridClipboardCellContent">
            <summary>
            This structure encapsulate the cell information necessary when clipboard content is prepared.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridClipboardCellContent.#ctor(System.Object,Avalonia.Controls.DataGridColumn,System.Object)">
            <summary>
            Creates a new DataGridClipboardCellValue structure containing information about a DataGrid cell.
            </summary>
            <param name="item">DataGrid row item containing the cell.</param>
            <param name="column">DataGridColumn containing the cell.</param>
            <param name="content">DataGrid cell value.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridClipboardCellContent.Column">
            <summary>
            DataGridColumn containing the cell.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridClipboardCellContent.Content">
            <summary>
            Cell content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridClipboardCellContent.Item">
            <summary>
            DataGrid row item containing the cell.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridClipboardCellContent.Equals(System.Object)">
            <summary>
            Field-by-field comparison to avoid reflection-based ValueType.Equals.
            </summary>
            <param name="obj">DataGridClipboardCellContent to compare.</param>
            <returns>True iff this and data are equal</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridClipboardCellContent.GetHashCode">
            <summary>
            Returns a deterministic hash code.
            </summary>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridClipboardCellContent.op_Equality(Avalonia.Controls.DataGridClipboardCellContent,Avalonia.Controls.DataGridClipboardCellContent)">
            <summary>
            Field-by-field comparison to avoid reflection-based ValueType.Equals.
            </summary>
            <param name="clipboardCellContent1">The first DataGridClipboardCellContent.</param>
            <param name="clipboardCellContent2">The second DataGridClipboardCellContent.</param>
            <returns>True iff clipboardCellContent1 and clipboardCellContent2 are equal.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridClipboardCellContent.op_Inequality(Avalonia.Controls.DataGridClipboardCellContent,Avalonia.Controls.DataGridClipboardCellContent)">
            <summary>
            Field-by-field comparison to avoid reflection-based ValueType.Equals.
            </summary>
            <param name="clipboardCellContent1">The first DataGridClipboardCellContent.</param>
            <param name="clipboardCellContent2">The second DataGridClipboardCellContent.</param>
            <returns>True iff clipboardCellContent1 and clipboardCellContent2 are NOT equal.</returns>
        </member>
        <member name="T:Avalonia.Controls.DataGridRowClipboardEventArgs">
            <summary>
            This class encapsulates a selected row's information necessary for the CopyingRowClipboardContent event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRowClipboardEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a DataGridRowClipboardEventArgs object and initializes the properties.
            </summary>
            <param name="item">The row's associated data item.</param>
            <param name="isColumnHeadersRow">Whether or not this EventArgs is for the column headers.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowClipboardEventArgs.ClipboardRowContent">
            <summary>
            This list should be used to modify, add ot remove a cell content before it gets stored into the clipboard.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowClipboardEventArgs.IsColumnHeadersRow">
            <summary>
            This property is true when the ClipboardRowContent represents column headers, in which case the Item is null.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowClipboardEventArgs.Item">
            <summary>
            DataGrid row item used for preparing the ClipboardRowContent.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridColumn" /> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.OwningGrid">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.DataGrid"/> control that contains this column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.InheritsWidth">
            <summary>
            Tracks whether or not this column inherits its Width value from the DataGrid.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.IsInitialDesiredWidthDetermined">
            <summary>
            When a column is initially added, we won't know its initial desired value
            until all rows have been measured.  We use this variable to track whether or
            not the column has been fully measured.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridColumn.IsVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DataGridColumn.IsVisible"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.IsVisible">
            <summary>
            Determines whether or not this column is visible.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.ActualWidth">
            <summary>
            Actual visible width after Width, MinWidth, and MaxWidth setting at the Column level and DataGrid level
            have been taken into account
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.CanUserReorder">
            <summary>
            Gets or sets a value that indicates whether the user can change the column display position by
            dragging the column header.
            </summary>
            <returns>
            true if the user can drag the column header to a new position; otherwise, false. The default is the current <see cref="P:Avalonia.Controls.DataGrid.CanUserReorderColumns" /> property value.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.CanUserResize">
            <summary>
            Gets or sets a value that indicates whether the user can adjust the column width using the mouse.
            </summary>
            <returns>
            true if the user can resize the column; false if the user cannot resize the column. The default is the current <see cref="P:Avalonia.Controls.DataGrid.CanUserResizeColumns" /> property value.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.CanUserSort">
            <summary>
            Gets or sets a value that indicates whether the user can sort the column by clicking the column header.
            </summary>
            <returns>
            true if the user can sort the column; false if the user cannot sort the column. The default is the current <see cref="P:Avalonia.Controls.DataGrid.CanUserSortColumns" /> property value.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.DisplayIndex">
             <summary>
             Gets or sets the display position of the column relative to the other columns in the <see cref="T:Avalonia.Controls.DataGrid" />.
             </summary>
             <returns>
             The zero-based position of the column as it is displayed in the associated <see cref="T:Avalonia.Controls.DataGrid" />. The default is the index of the corresponding <see cref="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)" /> in the <see cref="P:Avalonia.Controls.DataGrid.Columns" /> collection.
             </returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             When setting this property, the specified value is less than -1 or equal to <see cref="F:System.Int32.MaxValue" />.
            
             -or-
            
             When setting this property on a column in a <see cref="T:Avalonia.Controls.DataGrid" />, the specified value is less than zero or greater than or equal to the number of columns in the <see cref="T:Avalonia.Controls.DataGrid" />.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             When setting this property, the <see cref="T:Avalonia.Controls.DataGrid" /> is already making <see cref="P:Avalonia.Controls.DataGridColumn.DisplayIndex" /> adjustments. For example, this exception is thrown when you attempt to set <see cref="P:Avalonia.Controls.DataGridColumn.DisplayIndex" /> in a <see cref="E:Avalonia.Controls.DataGrid.ColumnDisplayIndexChanged" /> event handler.
            
             -or-
            
             When setting this property, the specified value would result in a frozen column being displayed in the range of unfrozen columns, or an unfrozen column being displayed in the range of frozen columns.
             </exception>
        </member>
        <member name="F:Avalonia.Controls.DataGridColumn.CellThemeProperty">
            <summary>
               Backing field for CellTheme property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.CellTheme">
            <summary>
               Gets or sets the <see cref="T:Avalonia.Controls.DataGridColumnHeader"/> cell theme.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridColumn.HeaderProperty">
            <summary>
               Backing field for Header property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.Header">
            <summary>
               Gets or sets the <see cref="T:Avalonia.Controls.DataGridColumnHeader"/> content
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridColumn.HeaderTemplateProperty">
            <summary>
               Backing field for Header property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.HeaderTemplate">
            <summary>
             Gets or sets an <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/> for the <see cref="P:Avalonia.Controls.DataGridColumn.Header"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.ClipboardContentBinding">
            <summary>
            The binding that will be used to get or set cell content for the clipboard.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.GetCellValue(System.Object,Avalonia.Data.IBinding)">
            <summary>
            Gets the value of a cell according to the the specified binding.
            </summary>
            <param name="item">The item associated with a cell.</param>
            <param name="binding">The binding to get the value of.</param>
            <returns>The resultant cell value.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.GetColumnContainingElement(Avalonia.Controls.Control)">
            <summary>
            Returns the column which contains the given element
            </summary>
            <param name="element">element contained in a column</param>
            <returns>Column that contains the element, or null if not found
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.ClearSort">
            <summary>
            Clears the current sort direction
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.Sort">
            <summary>
            Switches the current state of sort direction
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.Sort(System.ComponentModel.ListSortDirection)">
            <summary>
            Changes the sort direction of this column
            </summary>
            <param name="direction">New sort direction</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.CancelCellEdit(Avalonia.Controls.Control,System.Object)">
            <summary>
            When overridden in a derived class, causes the column cell being edited to revert to the unedited value.
            </summary>
            <param name="editingElement">
            The element that the column displays for a cell in editing mode.
            </param>
            <param name="uneditedValue">
            The previous, unedited value in the cell being edited.
            </param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.GenerateEditingElement(Avalonia.Controls.DataGridCell,System.Object,Avalonia.Controls.Utils.ICellEditBinding@)">
            <summary>
            When overridden in a derived class, gets an editing element that is bound to the column's <see cref="P:Avalonia.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">
            The cell that will contain the generated element.
            </param>
            <param name="dataItem">
            The data item represented by the row that contains the intended cell.
            </param>
            <param name="binding">When the method returns, contains the applied binding.</param>
            <returns>
            A new editing element that is bound to the column's <see cref="P:Avalonia.Controls.DataGridBoundColumn.Binding" /> property value.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.GenerateElement(Avalonia.Controls.DataGridCell,System.Object)">
            <summary>
            When overridden in a derived class, gets a read-only element that is bound to the column's
            <see cref="P:Avalonia.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">
            The cell that will contain the generated element.
            </param>
            <param name="dataItem">
            The data item represented by the row that contains the intended cell.
            </param>
            <returns>
            A new, read-only element that is bound to the column's <see cref="P:Avalonia.Controls.DataGridBoundColumn.Binding" /> property value.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.NotifyPropertyChanged(System.String)">
            <summary>
            Called by a specific column type when one of its properties changed,
            and its current cells need to be updated.
            </summary>
            <param name="propertyName">Indicates which property changed and caused this call</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.PrepareCellForEdit(Avalonia.Controls.Control,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            When overridden in a derived class, called when a cell in the column enters editing mode.
            </summary>
            <param name="editingElement">
            The element that the column displays for a cell in editing mode.
            </param>
            <param name="editingEventArgs">
            Information about the user gesture that is causing a cell to enter editing mode.
            </param>
            <returns>
            The unedited value.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.RefreshCellContent(Avalonia.Controls.Control,System.String)">
            <summary>
            Called by the DataGrid control when a column asked for its
            elements to be refreshed, typically because one of its properties changed.
            </summary>
            <param name="element">Indicates the element that needs to be refreshed</param>
            <param name="propertyName">Indicates which property changed and caused this call</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.EndCellEdit">
            <summary>
            When overridden in a derived class, called when a cell in the column exits editing mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.CoerceWidth(Avalonia.AvaloniaObject,Avalonia.Controls.DataGridLength)">
            <summary>
            Coerces a DataGridLength to a valid value.  If any value components are double.NaN, this method
            coerces them to a proper initial value.  For star columns, the desired width is calculated based
            on the rest of the star columns.  For pixel widths, the desired value is based on the pixel value.
            For auto widths, the desired value is initialized as the column's minimum width.
            </summary>
            <param name="source"></param>
            <param name="width">The DataGridLength to coerce.</param>
            <returns>The resultant (coerced) DataGridLength.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.ComputeLayoutRoundedWidth(System.Double)">
            <summary>
            If the DataGrid is using layout rounding, the pixel snapping will force all widths to
            whole numbers. Since the column widths aren't visual elements, they don't go through the normal
            rounding process, so we need to do it ourselves.  If we don't, then we'll end up with some
            pixel gaps and/or overlaps between columns.
            </summary>
            <param name="leftEdge"></param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.EnsureWidth">
            <summary>
            Ensures that this column's width has been coerced to a valid value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.Resize(Avalonia.Controls.DataGridLength,Avalonia.Controls.DataGridLength,System.Boolean)">
            <summary>
            Attempts to resize the column's width to the desired DisplayValue, but limits the final size
            to the column's minimum and maximum values.  If star sizing is being used, then the column
            can only decrease in size by the amount that the columns after it can increase in size.
            Likewise, the column can only increase in size if other columns can spare the width.
            </summary>
            <param name="oldWidth">with before resize.</param>
            <param name="newWidth">with after resize.</param>
            <param name="userInitiated">Whether or not this resize was initiated by a user action.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.SetWidthDesiredValue(System.Double)">
            <summary>
            Sets the column's Width to a new DataGridLength with a different DesiredValue.
            </summary>
            <param name="desiredValue">The new DesiredValue.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.SetWidthDisplayValue(System.Double)">
            <summary>
            Sets the column's Width to a new DataGridLength with a different DisplayValue.
            </summary>
            <param name="displayValue">The new DisplayValue.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.SetWidthInternal(Avalonia.Controls.DataGridLength)">
            <summary>
            Set the column's Width without breaking inheritance.
            </summary>
            <param name="width">The new Width.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.SetWidthInternalNoCallback(Avalonia.Controls.DataGridLength)">
            <summary>
            Sets the column's Width directly, without any callback effects.
            </summary>
            <param name="width">The new Width.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.SetWidthStarValue(System.Double)">
            <summary>
            Set the column's star value.  Whenever the star value changes, width inheritance is broken.
            </summary>
            <param name="value">The new star value.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.RemoveEditingElement">
            <summary>
            Clears the cached editing element.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.SortMemberPath">
            <summary>
            Holds the name of the member to use for sorting, if not using the default.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.Tag">
            <summary>
            Gets or sets an object associated with this column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumn.CustomSortComparer">
            <summary>
            Holds a Comparer to use for sorting, if not using the default.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumn.GetSortDescription">
            <summary>
            We get the sort description from the data source.  We don't worry whether we can modify sort -- perhaps the sort description
            describes an unchangeable sort that exists on the data.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumnCollection.VisibleStarColumnCount">
            <summary>
            The number of star columns that are currently visible.
            NOTE: Requires that EnsureVisibleEdgedColumnsWidth has been called.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnCollection.EnsureVisibleEdgedColumnsWidth">
            <summary>
            In addition to ensuring that column widths are valid, method updates the values of
            VisibleEdgedColumnsWidth and VisibleStarColumnCount.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnCollection.GetDisplayedColumns(System.Predicate{Avalonia.Controls.DataGridColumn})">
            <summary>
            Returns an enumeration of all columns that meet the criteria of the filter predicate.
            </summary>
            <param name="filter">Criteria for inclusion.</param>
            <returns>Columns that meet the criteria, in ascending DisplayIndex order.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnCollection.GetDisplayedColumns(System.Boolean,System.Predicate{Avalonia.Controls.DataGridColumn})">
            <summary>
            Returns an enumeration of all columns that meet the criteria of the filter predicate.
            The columns are returned in the order specified by the reverse flag.
            </summary>
            <param name="reverse">Whether or not to return the columns in descending DisplayIndex order.</param>
            <param name="filter">Criteria for inclusion.</param>
            <returns>Columns that meet the criteria, in the order specified by the reverse flag.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnCollection.GetDisplayedColumnsReverse(System.Predicate{Avalonia.Controls.DataGridColumn})">
            <summary>
            Returns an enumeration of all columns that meet the criteria of the filter predicate.
            The columns are returned in descending DisplayIndex order.
            </summary>
            <param name="filter">Criteria for inclusion.</param>
            <returns>Columns that meet the criteria, in descending DisplayIndex order.</returns>
        </member>
        <member name="T:Avalonia.Controls.DataGridColumnHeader">
            <summary>
            Represents an individual <see cref="T:Avalonia.Controls.DataGrid" /> column header.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.DataGridColumnHeader" /> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnHeader.CanResizeColumn(Avalonia.Controls.DataGridColumn)">
            <summary>
            Determines whether a column can be resized by dragging the border of its header.  If star sizing
            is being used, there are special conditions that can prevent a column from being resized:
            1. The column is the last visible column.
            2. All columns are constrained by either their maximum or minimum values.
            </summary>
            <param name="column">Column to check.</param>
            <returns>Whether or not the column can be resized by dragging its header.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnHeader.GetReorderingTargetColumn(Avalonia.Point,System.Boolean,System.Double@)">
            <summary>
            Returns the column against whose top-left the reordering caret should be positioned
            </summary>
            <param name="mousePositionHeaders">Mouse position within the ColumnHeadersPresenter</param>
            <param name="scroll">Whether or not to scroll horizontally when a column is dragged out of bounds</param>
            <param name="scrollAmount">If scroll is true, returns the horizontal amount that was scrolled</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnHeader.GetReorderingTargetDisplayIndex(Avalonia.Point)">
            <summary>
            Returns the display index to set the column to
            </summary>
            <param name="mousePositionHeaders">Mouse position relative to the column headers presenter</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnHeader.IsReorderTargeted(Avalonia.Point,Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Returns true if the mouse is
            - to the left of the element, or within the left half of the element
            and
            - within the vertical range of the element, or ignoreVertical == true
            </summary>
            <param name="mousePosition"></param>
            <param name="element"></param>
            <param name="ignoreVertical"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnHeader.OnLostMouseCapture">
            <summary>
            Resets the static DataGridColumnHeader properties when a header loses mouse capture
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnHeader.OnMouseEnter(Avalonia.Point)">
            <summary>
            Sets up the DataGridColumnHeader for the MouseEnter event
            </summary>
            <param name="mousePosition">mouse position relative to the DataGridColumnHeader</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnHeader.OnMouseLeave">
            <summary>
            Sets up the DataGridColumnHeader for the MouseLeave event
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridDataConnection.AllowSort">
            <summary>
            True if the collection view says it can sort.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridDataConnection.TryGetCount(System.Boolean,System.Boolean,System.Int32@)">
            <summary>Try get number of DataSource items.</summary>
            <param name="allowSlow">When "allowSlow" is false, method will not use Linq.Count() method and will return 0 or 1 instead.</param>
            <param name="getAny">If "getAny" is true, method can use Linq.Any() method to speedup.</param>
            <param name="count">number of DataSource items.</param>
            <returns>true if able to retrieve number of DataSource items; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridDataConnection.BeginEdit(System.Object)">
            <summary>
            Puts the entity into editing mode if possible
            </summary>
            <param name="dataItem">The entity to edit</param>
            <returns>True if editing was started</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridDataConnection.CancelEdit(System.Object)">
            <summary>
            Cancels the current entity editing and exits the editing mode.
            </summary>
            <param name="dataItem">The entity being edited</param>
            <returns>True if a cancellation operation was invoked.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridDataConnection.EndEdit(System.Object)">
            <summary>
            Commits the current entity editing and exits the editing mode.
            </summary>
            <param name="dataItem">The entity being edited</param>
            <returns>True if a commit operation was invoked.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridDataConnection.CreateView(System.Collections.IEnumerable)">
            <summary>
            Creates a collection view around the DataGrid's source. ICollectionViewFactory is
            used if the source implements it. Otherwise a PagedCollectionView is returned.
            </summary>
            <param name="source">Enumerable source for which to create a view</param>
            <returns>ICollectionView view over the provided source</returns>
        </member>
        <member name="T:Avalonia.Controls.DataGridEditAction">
            <summary>
            Used to specify action to take out of edit mode.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridEditAction.Cancel">
            <summary>
            Cancel the changes.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridEditAction.Commit">
            <summary>
            Commit edited value.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridGridLinesVisibility">
            <summary>
            Determines whether the inner cells' vertical/horizontal gridlines are shown or not.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridHeadersVisibility">
            <summary>
            Determines whether the row/column headers are shown or not.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridHeadersVisibility.All">
            <summary>
            Show Row, Column, and Corner Headers
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridHeadersVisibility.Column">
            <summary>
            Show only Column Headers with top-right corner Header
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridHeadersVisibility.Row">
            <summary>
            Show only Row Headers with bottom-left corner
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridHeadersVisibility.None">
            <summary>
            Don’t show any Headers
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridSelectionAction">
            <summary>
            Determines the type of action to take when selecting items
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridSelectionMode">
            <summary>
            Determines the selection model
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridLength">
            <summary>
            Represents the lengths of elements within the <see cref="T:Avalonia.Controls.DataGrid" /> control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridLength.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridLength" /> class. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Avalonia.Controls.DataGridLength.#ctor(System.Double,Avalonia.Controls.DataGridLengthUnitType)">
            <summary>
                Initializes to a specified value and unit.
            </summary>
            <param name="value">The value to hold.</param>
            <param name="type">The unit of <c>value</c>.</param>
            <remarks> 
                <c>value</c> is ignored unless <c>type</c> is
                <c>DataGridLengthUnitType.Pixel</c> or
                <c>DataGridLengthUnitType.Star</c>
            </remarks>
            <exception cref="T:System.ArgumentException">
                If <c>value</c> parameter is <c>double.NaN</c>
                or <c>value</c> parameter is <c>double.NegativeInfinity</c>
                or <c>value</c> parameter is <c>double.PositiveInfinity</c>.
            </exception>
        </member>
        <member name="M:Avalonia.Controls.DataGridLength.#ctor(System.Double,Avalonia.Controls.DataGridLengthUnitType,System.Double,System.Double)">
            <summary>
                Initializes to a specified value and unit.
            </summary>
            <param name="value">The value to hold.</param>
            <param name="type">The unit of <c>value</c>.</param>
            <param name="desiredValue"></param>
            <param name="displayValue"></param>
            <remarks> 
                <c>value</c> is ignored unless <c>type</c> is
                <c>DataGridLengthUnitType.Pixel</c> or
                <c>DataGridLengthUnitType.Star</c>
            </remarks>
            <exception cref="T:System.ArgumentException">
                If <c>value</c> parameter is <c>double.NaN</c>
                or <c>value</c> parameter is <c>double.NegativeInfinity</c>
                or <c>value</c> parameter is <c>double.PositiveInfinity</c>.
            </exception>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.Auto">
            <summary>
            Gets a <see cref="T:Avalonia.Controls.DataGridLength" /> structure that represents the standard automatic sizing mode.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Controls.DataGridLength" /> structure that represents the standard automatic sizing mode.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.DesiredValue">
            <summary>
                Returns the desired value of this instance.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.DisplayValue">
            <summary>
                Returns the display value of this instance.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.IsAbsolute">
            <summary>
                Returns <c>true</c> if this DataGridLength instance holds 
                an absolute (pixel) value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.IsAuto">
            <summary>
                Returns <c>true</c> if this DataGridLength instance is 
                automatic (not specified).
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.IsSizeToCells">
            <summary>
                Returns <c>true</c> if this instance is to size to the cells of a column or row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.IsSizeToHeader">
            <summary>
                Returns <c>true</c> if this instance is to size to the header of a column or row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.IsStar">
            <summary>
                Returns <c>true</c> if this DataGridLength instance holds a weighted proportion
                of available space.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.SizeToCells">
            <summary>
            Gets a <see cref="T:Avalonia.Controls.DataGridLength" /> structure that represents the cell-based automatic sizing mode.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Controls.DataGridLength" /> structure that represents the cell-based automatic sizing mode.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.SizeToHeader">
            <summary>
            Gets a <see cref="T:Avalonia.Controls.DataGridLength" /> structure that represents the header-based automatic sizing mode.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Controls.DataGridLength" /> structure that represents the header-based automatic sizing mode.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.UnitType">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.DataGridLengthUnitType" /> that represents the current sizing mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridLength.Value">
            <summary>
            Gets the absolute value of the <see cref="T:Avalonia.Controls.DataGridLength" /> in pixels.
            </summary>
            <returns>
            The absolute value of the <see cref="T:Avalonia.Controls.DataGridLength" /> in pixels.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridLength.op_Equality(Avalonia.Controls.DataGridLength,Avalonia.Controls.DataGridLength)">
            <summary>
            Overloaded operator, compares 2 DataGridLength's.
            </summary>
            <param name="gl1">first DataGridLength to compare.</param>
            <param name="gl2">second DataGridLength to compare.</param>
            <returns>true if specified DataGridLength have same value, 
            unit type, desired value, and display value.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridLength.op_Inequality(Avalonia.Controls.DataGridLength,Avalonia.Controls.DataGridLength)">
            <summary>
            Overloaded operator, compares 2 DataGridLength's.
            </summary>
            <param name="gl1">first DataGridLength to compare.</param>
            <param name="gl2">second DataGridLength to compare.</param>
            <returns>true if specified DataGridLength have either different value, 
            unit type, desired value, or display value.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridLength.Equals(Avalonia.Controls.DataGridLength)">
            <summary>
            Compares this instance of DataGridLength with another instance.
            </summary>
            <param name="other">DataGridLength length instance to compare.</param>
            <returns><c>true</c> if this DataGridLength instance has the same value 
            and unit type as gridLength.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridLength.Equals(System.Object)">
            <summary>
            Compares this instance of DataGridLength with another object.
            </summary>
            <param name="obj">Reference to an object for comparison.</param>
            <returns><c>true</c> if this DataGridLength instance has the same value 
            and unit type as oCompare.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridLength.GetHashCode">
            <summary>
            Returns a unique hash code for this DataGridLength
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="T:Avalonia.Controls.DataGridLengthConverter">
            <summary>
            DataGridLengthConverter - Converter class for converting instances of other types to and from DataGridLength instances.
            </summary> 
        </member>
        <member name="M:Avalonia.Controls.DataGridLengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Checks whether or not this class can convert from a given type.
            </summary>
            <param name="context">
            An ITypeDescriptorContext that provides a format context. 
            </param>
            <param name="sourceType">The Type being queried for support.</param>
            <returns>
            <c>true</c> if this converter can convert from the provided type, 
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridLengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Checks whether or not this class can convert to a given type.
            </summary>
            <param name="context">
            An ITypeDescriptorContext that provides a format context. 
            </param>
            <param name="destinationType">The Type being queried for support.</param>
            <returns>
            <c>true</c> if this converter can convert to the provided type, 
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridLengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Attempts to convert to a DataGridLength from the given object.
            </summary>
            <param name="context">
            An ITypeDescriptorContext that provides a format context. 
            </param>
            <param name="culture">
            The CultureInfo to use for the conversion. 
            </param>
            <param name="value">The object to convert to a GridLength.</param>
            <returns>
            The GridLength instance which was constructed.
            </returns>
            <exception cref="T:System.NotSupportedException">
            A NotSupportedException is thrown if the example object is null.
            </exception>
        </member>
        <member name="M:Avalonia.Controls.DataGridLengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
             <summary>
             Attempts to convert a DataGridLength instance to the given type.
             </summary>
             <param name="context">
             An ITypeDescriptorContext that provides a format context. 
             </param>
             <param name="culture">
             The CultureInfo to use for the conversion. 
             </param>
             <param name="value">The DataGridLength to convert.</param>
             <param name="destinationType">The type to which to convert the DataGridLength instance.</param>
             <returns>
             The object which was constructed.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             An ArgumentNullException is thrown if the example object is null.
             </exception>
             <exception cref="T:System.NotSupportedException">
             A NotSupportedException is thrown if the object is not null and is not a DataGridLength,
             or if the destinationType isn't one of the valid destination types.
             </exception>
            <SecurityNote>
                 Critical: calls InstanceDescriptor ctor which LinkDemands
                 PublicOK: can only make an InstanceDescriptor for DataGridLength, not an arbitrary class
            </SecurityNote> 
        </member>
        <member name="T:Avalonia.Controls.DataGridRow">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.DataGrid" /> row.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridRow.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRow.Header">
            <summary>
            Gets or sets the row header.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRow.IsValid">
            <summary>
            Gets a value that indicates whether the data in a row is valid.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRow.DetailsTemplate">
            <summary>
            Gets or sets the template that is used to display the details section of the row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRow.AreDetailsVisible">
            <summary>
            Gets or sets a value that indicates when the details section of the row is displayed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridRow" /> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRow.Index">
            <summary>
            Index of the row
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRow.IsLayoutDelayed">
            <summary>
            Layout when template is applied
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRow.GetIndex">
            <summary>
            Returns the index of the current row.
            </summary>
            <returns>
            The index of the current row.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridRow.GetRowContainingElement(Avalonia.Controls.Control)">
            <summary>
            Returns the row which contains the given element
            </summary>
            <param name="element">element contained in a row</param>
            <returns>Row that contains the element, or null if not found
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridRow.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the content of the <see cref="T:Avalonia.Controls.DataGridRow" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:Avalonia.Controls.DataGridRow" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:Avalonia.Controls.DataGridRow.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the children of a <see cref="T:Avalonia.Controls.DataGridRow" /> to
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:Avalonia.Controls.Primitives.DataGridRow" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridRow.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the column header when a new template is applied.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisible">
            <summary>
            Gets or sets a value that indicates whether the item count is visible.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowGroupHeader.PropertyName">
            <summary>
            Gets or sets the name of the property that this <see cref="T:Avalonia.Controls.DataGrid" /> row is bound to.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisible">
            <summary>
            Gets or sets a value that indicates whether the property name is visible.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowGroupHeader.SublevelIndent">
            <summary>
            Gets or sets a value that indicates the amount that the
            children of the <see cref="T:Avalonia.Controls.RowGroupHeader" /> are indented.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRowGroupHeader.#ctor">
            <summary>
            Constructs a DataGridRowGroupHeader
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.DataGridRowHeader">
            <summary>
            Represents an individual <see cref="T:Avalonia.Controls.DataGrid" /> row header. 
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DataGridRowHeader.AreSeparatorsVisible">
            <summary>
            Gets or sets a value indicating whether the row header separator lines are visible.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridRowHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.DataGridRowHeader" /> class. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridRowHeader.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the row header when a new template is applied. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridRowHeader.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the children of a <see cref="T:Avalonia.Controls.Primitives.DataGridRowHeader" /> to prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:Avalonia.Controls.Primitives.DataGridRowHeader" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.DataGridCellsPresenter">
            <summary>
            Used within the template of a <see cref="T:Avalonia.Controls.DataGrid" />
            to specify the location in the control's visual tree where the cells are to be added. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridCellsPresenter.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the content of the <see cref="T:Avalonia.Controls.Primitives.DataGridCellsPresenter" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:Avalonia.Controls.Primitives.DataGridCellsPresenter" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridCellsPresenter.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the children of a <see cref="T:Avalonia.Controls.Primitives.DataGridCellsPresenter" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:Avalonia.Controls.Primitives.DataGridCellsPresenter" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter">
            <summary>
            Used within the template of a <see cref="T:Avalonia.Controls.DataGrid" /> to specify the 
            location in the control's visual tree where the column headers are to be added.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter.DragColumn">
            <summary>
            Tracks which column is currently being dragged.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter.DragIndicator">
            <summary>
            The current drag indicator control.  This value is null if no column is being dragged.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter.DragIndicatorOffset">
            <summary>
            The distance, in pixels, that the DragIndicator should be positioned away from the corresponding DragColumn.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter.DropLocationIndicator">
            <summary>
            The drop location indicator control.  This value is null if no column is being dragged.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter.DropLocationIndicatorOffset">
            <summary>
            The distance, in pixels, that the drop location indicator should be positioned away from the left edge
            of the ColumnsHeaderPresenter.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the content of the <see cref="T:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter.EnsureColumnReorderingClip(Avalonia.Controls.Control,System.Double,System.Double,System.Double)">
            <summary>
            Clips the DragIndicator and DropLocationIndicator controls according to current ColumnHeaderPresenter constraints.
            </summary>
            <param name="control">The DragIndicator or DropLocationIndicator</param>
            <param name="height">The available height</param>
            <param name="frozenColumnsWidth">The width of the frozen column region</param>
            <param name="controlLeftEdge">The left edge of the control to clip</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the children of a <see cref="T:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.DataGridDetailsPresenter">
            <summary>
            Used within the template of a <see cref="T:Avalonia.Controls.DataGrid" /> to specify the location in the control's visual tree 
            where the row details are to be added.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DataGridDetailsPresenter.ContentHeight">
            <summary>
            Gets or sets the height of the content.
            </summary>
            <returns>
            The height of the content.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridDetailsPresenter.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the content of the <see cref="T:Avalonia.Controls.Primitives.DataGridDetailsPresenter" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:Avalonia.Controls.Primitives.DataGridDetailsPresenter" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridDetailsPresenter.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the children of a <see cref="T:Avalonia.Controls.Primitives.DataGridDetailsPresenter" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:Avalonia.Controls.Primitives.DataGridDetailsPresenter" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.DataGridFrozenGrid">
            <summary>
            Represents a non-scrollable grid that contains <see cref="T:Avalonia.Controls.DataGrid" /> row headers.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridFrozenGrid.GetIsFrozen(Avalonia.Controls.Control)">
            <summary>
            Gets a value that indicates whether the grid is frozen.
            </summary>
            <param name="element">
            The object to get the <see cref="P:Avalonia.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> value from.
            </param>
            <returns>true if the grid is frozen; otherwise, false. The default is true.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridFrozenGrid.SetIsFrozen(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets a value that indicates whether the grid is frozen.
            </summary>
            <param name="element">The object to set the <see cref="P:Avalonia.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> value on.</param>
            <param name="value">true if <paramref name="element" /> is frozen; otherwise, false.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element" /> is null.</exception>
        </member>
        <member name="T:Avalonia.Controls.Primitives.DataGridRowsPresenter">
            <summary>
            Used within the template of a <see cref="T:Avalonia.Controls.DataGrid" /> to specify the
            location in the control's visual tree where the rows are to be added.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridRowsPresenter.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the content of the <see cref="T:Avalonia.Controls.Primitives.DataGridRowsPresenter" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:Avalonia.Controls.Primitives.DataGridRowsPresenter" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DataGridRowsPresenter.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the children of a <see cref="T:Avalonia.Controls.Primitives.DataGridRowsPresenter" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:Avalonia.Controls.Primitives.DataGridRowsPresenter" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="F:Avalonia.Controls.DataGridTemplateColumn.CellEditingTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DataGridTemplateColumn.CellEditingTemplate"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridTemplateColumn.CellEditingTemplate">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/> which is used for the editing mode of the current <see cref="T:Avalonia.Controls.DataGridCell"/>
            </summary>
            <value>
            An <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/> for the editing mode of the current <see cref="T:Avalonia.Controls.DataGridCell"/>
            </value>
            <remarks>
            If this property is <see langword="null"/> the column is read-only.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.DataGridTextColumn">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.DataGrid" /> column that hosts textual content in its cells.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridTextColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridTextColumn" /> class.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridTextColumn.FontFamilyProperty">
            <summary>
            Identifies the FontFamily dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridTextColumn.FontFamily">
            <summary>
            Gets or sets the font name.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridTextColumn.FontSizeProperty">
            <summary>
            Identifies the FontSize dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridTextColumn.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridTextColumn.FontStyleProperty">
            <summary>
            Identifies the FontStyle dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridTextColumn.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridTextColumn.FontWeightProperty">
            <summary>
            Identifies the FontWeight dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridTextColumn.FontWeight">
            <summary>
            Gets or sets the font weight or thickness.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridTextColumn.FontStretchProperty">
            <summary>
            Identifies the FontStretch dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridTextColumn.FontStretch">
            <summary>
            Gets or sets the font weight or thickness.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataGridTextColumn.ForegroundProperty">
            <summary>
            Identifies the Foreground dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridTextColumn.Foreground">
            <summary>
            Gets or sets a brush that describes the foreground of the column cells.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridTextColumn.CancelCellEdit(Avalonia.Controls.Control,System.Object)">
            <summary>
            Causes the column cell being edited to revert to the specified value.
            </summary>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
            <param name="uneditedValue">The previous, unedited value in the cell being edited.</param>
        </member>
        <member name="M:Avalonia.Controls.DataGridTextColumn.GenerateEditingElementDirect(Avalonia.Controls.DataGridCell,System.Object)">
            <summary>
            Gets a <see cref="T:Avalonia.Controls.TextBox" /> control that is bound to the column's <see cref="P:Avalonia.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">The cell that will contain the generated element.</param>
            <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
            <returns>A new <see cref="T:Avalonia.Controls.TextBox" /> control that is bound to the column's <see cref="P:Avalonia.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridTextColumn.GenerateElement(Avalonia.Controls.DataGridCell,System.Object)">
            <summary>
            Gets a read-only <see cref="T:Avalonia.Controls.TextBlock" /> element that is bound to the column's <see cref="P:Avalonia.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">The cell that will contain the generated element.</param>
            <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
            <returns>A new, read-only <see cref="T:Avalonia.Controls.TextBlock" /> element that is bound to the column's <see cref="P:Avalonia.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridTextColumn.PrepareCellForEdit(Avalonia.Controls.Control,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when the cell in the column enters editing mode.
            </summary>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
            <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
            <returns>The unedited value. </returns>
        </member>
        <member name="M:Avalonia.Controls.DataGridTextColumn.RefreshCellContent(Avalonia.Controls.Control,System.String)">
            <summary>
            Called by the DataGrid control when this column asks for its elements to be
            updated, because a property changed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.DataGrid.AutoGeneratingColumn" /> event. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs.#ctor(System.String,System.Type,Avalonia.Controls.DataGridColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs" /> class.
            </summary>
            <param name="propertyName">
            The name of the property bound to the generated column.
            </param>
            <param name="propertyType">
            The <see cref="T:System.Type" /> of the property bound to the generated column.
            </param>
            <param name="column">
            The generated column.
            </param>
        </member>
        <member name="P:Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs.Column">
            <summary>
            Gets the generated column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyName">
            <summary>
            Gets the name of the property bound to the generated column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the property bound to the generated column.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridBeginningEditEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.DataGrid.BeginningEdit" /> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridBeginningEditEventArgs.#ctor(Avalonia.Controls.DataGridColumn,Avalonia.Controls.DataGridRow,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Avalonia.Controls.DataGridBeginningEditEventArgs" /> class.
            </summary>
            <param name="column">
            The column that contains the cell to be edited.
            </param>
            <param name="row">
            The row that contains the cell to be edited.
            </param>
            <param name="editingEventArgs">
            Information about the user gesture that caused the cell to enter edit mode.
            </param>
        </member>
        <member name="P:Avalonia.Controls.DataGridBeginningEditEventArgs.Column">
            <summary>
            Gets the column that contains the cell to be edited.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridBeginningEditEventArgs.EditingEventArgs">
            <summary>
            Gets information about the user gesture that caused the cell to enter edit mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridBeginningEditEventArgs.Row">
            <summary>
            Gets the row that contains the cell to be edited.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridCellEditEndedEventArgs">
            <summary>
            Provides information just after a cell has exited editing mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridCellEditEndedEventArgs.#ctor(Avalonia.Controls.DataGridColumn,Avalonia.Controls.DataGridRow,Avalonia.Controls.DataGridEditAction)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="column">The column of the cell that has just exited edit mode.</param>
            <param name="row">The row container of the cell container that has just exited edit mode.</param>
            <param name="editAction">The editing action that has been taken.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridCellEditEndedEventArgs.Column">
            <summary>
            The column of the cell that has just exited edit mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridCellEditEndedEventArgs.EditAction">
            <summary>
            The edit action taken when leaving edit mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridCellEditEndedEventArgs.Row">
            <summary>
            The row container of the cell container that has just exited edit mode.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridCellPointerPressedEventArgs">
            <summary>
            Provides information after the cell has been pressed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridCellPointerPressedEventArgs.#ctor(Avalonia.Controls.DataGridCell,Avalonia.Controls.DataGridRow,Avalonia.Controls.DataGridColumn,Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="cell">The cell that has been pressed.</param>
            <param name="row">The row container of the cell that has been pressed.</param>
            <param name="column">The column of the cell that has been pressed.</param>
            <param name="e">The pointer action that has been taken.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridCellPointerPressedEventArgs.Cell">
            <summary>
            The cell that has been pressed.
            </summary> 
        </member>
        <member name="P:Avalonia.Controls.DataGridCellPointerPressedEventArgs.Row">
            <summary>
            The row container of the cell that has been pressed.
            </summary> 
        </member>
        <member name="P:Avalonia.Controls.DataGridCellPointerPressedEventArgs.Column">
            <summary>
            The column of the cell that has been pressed.
            </summary> 
        </member>
        <member name="P:Avalonia.Controls.DataGridCellPointerPressedEventArgs.PointerPressedEventArgs">
            <summary>
            The pointer action that has been taken.
            </summary> 
        </member>
        <member name="T:Avalonia.Controls.DataGridCellEditEndingEventArgs">
            <summary>
            Provides information just before a cell exits editing mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridCellEditEndingEventArgs.#ctor(Avalonia.Controls.DataGridColumn,Avalonia.Controls.DataGridRow,Avalonia.Controls.Control,Avalonia.Controls.DataGridEditAction)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="column">The column of the cell that is about to exit edit mode.</param>
            <param name="row">The row container of the cell container that is about to exit edit mode.</param>
            <param name="editingElement">The editing element within the cell.</param>
            <param name="editAction">The editing action that will be taken.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridCellEditEndingEventArgs.Column">
            <summary>
            The column of the cell that is about to exit edit mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridCellEditEndingEventArgs.EditAction">
            <summary>
            The edit action to take when leaving edit mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridCellEditEndingEventArgs.EditingElement">
            <summary>
            The editing element within the cell. 
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridCellEditEndingEventArgs.Row">
            <summary>
            The row container of the cell container that is about to exit edit mode.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridColumnEventArgs">
            <summary>
            Provides data for <see cref="T:Avalonia.Controls.DataGrid" /> column-related events.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnEventArgs.#ctor(Avalonia.Controls.DataGridColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridColumnEventArgs" /> class.
            </summary>
            <param name="column">The column that the event occurs for.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumnEventArgs.Column">
            <summary>
            Gets the column that the event occurs for.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridColumnReorderingEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.DataGrid.ColumnReordering" /> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridColumnReorderingEventArgs.#ctor(Avalonia.Controls.DataGridColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridColumnReorderingEventArgs" /> class.
            </summary>
            <param name="dataGridColumn"></param>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumnReorderingEventArgs.Column">
            <summary>
            The column being moved.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumnReorderingEventArgs.DragIndicator">
            <summary>
            The popup indicator displayed while dragging.  If null and Handled = true, then do not display a tooltip.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridColumnReorderingEventArgs.DropLocationIndicator">
            <summary>
            UIElement to display at the insertion position.  If null and Handled = true, then do not display an insertion indicator.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridRowEventArgs">
            <summary>
            Provides data for <see cref="T:Avalonia.Controls.DataGrid" /> row-related events.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRowEventArgs.#ctor(Avalonia.Controls.DataGridRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridRowEventArgs" /> class.
            </summary>
            <param name="dataGridRow">The row that the event occurs for.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowEventArgs.Row">
            <summary>
            Gets the row that the event occurs for.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridRowEditEndingEventArgs">
            <summary>
            Provides information just before a row exits editing mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRowEditEndingEventArgs.#ctor(Avalonia.Controls.DataGridRow,Avalonia.Controls.DataGridEditAction)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="row">The row container of the cell container that is about to exit edit mode.</param>
            <param name="editAction">The editing action that will be taken.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowEditEndingEventArgs.EditAction">
            <summary>
            The editing action that will be taken.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowEditEndingEventArgs.Row">
            <summary>
            The row container of the cell container that is about to exit edit mode.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridRowEditEndedEventArgs">
            <summary>
            Provides information just after a row has exited edit mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRowEditEndedEventArgs.#ctor(Avalonia.Controls.DataGridRow,Avalonia.Controls.DataGridEditAction)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="row">The row container of the cell container that has just exited edit mode.</param>
            <param name="editAction">The editing action that has been taken.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowEditEndedEventArgs.EditAction">
            <summary>
            The editing action that has been taken.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowEditEndedEventArgs.Row">
            <summary>
            The row container of the cell container that has just exited edit mode.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridPreparingCellForEditEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.DataGrid.PreparingCellForEdit" /> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridPreparingCellForEditEventArgs.#ctor(Avalonia.Controls.DataGridColumn,Avalonia.Controls.DataGridRow,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridPreparingCellForEditEventArgs" /> class.
            </summary>
            <param name="column">The column that contains the cell to be edited.</param>
            <param name="row">The row that contains the cell to be edited.</param>
            <param name="editingEventArgs">Information about the user gesture that caused the cell to enter edit mode.</param>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridPreparingCellForEditEventArgs.Column">
            <summary>
            Gets the column that contains the cell to be edited.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridPreparingCellForEditEventArgs.EditingElement">
            <summary>
            Gets the element that the column displays for a cell in editing mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridPreparingCellForEditEventArgs.EditingEventArgs">
            <summary>
            Gets information about the user gesture that caused the cell to enter edit mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridPreparingCellForEditEventArgs.Row">
            <summary>
            Gets the row that contains the cell to be edited.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridRowGroupHeaderEventArgs">
            <summary>
            EventArgs used for the DataGrid's LoadingRowGroup and UnloadingRowGroup events
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRowGroupHeaderEventArgs.#ctor(Avalonia.Controls.DataGridRowGroupHeader)">
            <summary>
            Constructs a DataGridRowGroupHeaderEventArgs instance
            </summary>
            <param name="rowGroupHeader"></param>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowGroupHeaderEventArgs.RowGroupHeader">
            <summary>
            DataGridRowGroupHeader associated with this instance
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataGridRowDetailsEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.DataGrid.LoadingRowDetails" />, <see cref="E:Avalonia.Controls.DataGrid.UnloadingRowDetails" />, 
            and <see cref="E:Avalonia.Controls.DataGrid.RowDetailsVisibilityChanged" /> events.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataGridRowDetailsEventArgs.#ctor(Avalonia.Controls.DataGridRow,Avalonia.Controls.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DataGridRowDetailsEventArgs" /> class. 
            </summary>
            <param name="row">The row that the event occurs for.</param>
            <param name="detailsElement">The row details section as a framework element.</param>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowDetailsEventArgs.DetailsElement">
            <summary>
            Gets the row details section as a framework element.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DataGridRowDetailsEventArgs.Row">
            <summary>
            Gets the row that the event occurs for.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IndexToValueTable`1.IndexCount">
            <summary>
            Total number of indices represented in the table
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IndexToValueTable`1.IsEmpty">
            <summary>
            Returns true if the table is empty
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IndexToValueTable`1.RangeCount">
            <summary>
            Returns the number of index ranges in the table
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.AddValue(System.Int32,`0)">
            <summary>
            Add a value with an associated index to the table
            </summary>
            <param name="index">Index where the value is to be added or updated</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.AddValues(System.Int32,System.Int32,`0)">
            <summary>
            Add multiples values with an associated start index to the table 
            </summary>
            <param name="startIndex">index where first value is added</param>
            <param name="count">Total number of values to add (must be greater than 0)</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.Clear">
            <summary>
            Clears the index table
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.Contains(System.Int32)">
            <summary>
            Returns true if the given index is contained in the table
            </summary>
            <param name="index">index to search for</param>
            <returns>True if the index is contained in the table</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.ContainsAll(System.Int32,System.Int32)">
            <summary>
            Returns true if the entire given index range is contained in the table
            </summary>
            <param name="startIndex">beginning of the range</param>
            <param name="endIndex">end of the range</param>
            <returns>True if the entire index range is present in the table</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.ContainsIndexAndValue(System.Int32,`0)">
            <summary>
            Returns true if the given index is contained in the table with the the given value
            </summary>
            <param name="index">index to search for</param>
            <param name="value">value expected</param>
            <returns>true if the given index is contained in the table with the the given value</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.Copy">
            <summary>
            Returns a copy of this IndexToValueTable
            </summary>
            <returns>copy of this IndexToValueTable</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.GetIndexCount(System.Int32,System.Int32,`0)">
            <summary>
            Returns the inclusive index count between lowerBound and upperBound of all indexes with the given value
            </summary>
            <param name="lowerBound">lowerBound criteria</param>
            <param name="upperBound">upperBound criteria</param>
            <param name="value">value to look for</param>
            <returns>Number of indexes contained in the table between lowerBound and upperBound (inclusive)</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.GetIndexCount(System.Int32,System.Int32)">
            <summary>
            Returns the inclusive index count between lowerBound and upperBound
            </summary>
            <param name="lowerBound">lowerBound criteria</param>
            <param name="upperBound">upperBound criteria</param>
            <returns>Number of indexes contained in the table between lowerBound and upperBound (inclusive)</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.GetIndexCountBeforeGap(System.Int32,System.Int32)">
            <summary>
            Returns the number indexes in this table after a given startingIndex but before
            reaching a gap of indexes of a given size
            </summary>
            <param name="startingIndex">Index to start at</param>
            <param name="gapSize">Size of index gap</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.GetIndexes">
            <summary>
            Returns an enumerator that goes through the indexes present in the table
            </summary>
            <returns>an enumerator that enumerates the indexes present in the table</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.GetIndexes(System.Int32)">
            <summary>
            Returns all the indexes on or after a starting index
            </summary>
            <param name="startIndex">start index</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.GetNthIndex(System.Int32)">
            <summary>
            Return the index of the Nth element in the table.
            </summary>
            <param name="n">n</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.GetValueAt(System.Int32)">
            <summary>
            Returns the value at a given index or the default value if the index is not in the table
            </summary>
            <param name="index">index to search for</param>
            <returns>the value at the given index or the default value if index is not in the table</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.GetValueAt(System.Int32,System.Boolean@)">
            <summary>
            Returns the value at a given index or the default value if the index is not in the table
            </summary>
            <param name="index">index to search for</param>
            <param name="found">set to true by the method if the index was found; otherwise, false</param>
            <returns>the value at the given index or the default value if index is not in the table</returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.IndexOf(System.Int32)">
            <summary>
            Returns an index's index within this table
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.InsertIndex(System.Int32)">
            <summary>
            Inserts an index at the given location.  This does not alter values in the table
            </summary>
            <param name="index">index location to insert an index</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.InsertIndexAndValue(System.Int32,`0)">
            <summary>
            Inserts an index into the table with the given value 
            </summary>
            <param name="index">index to insert</param>
            <param name="value">value for the index</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.InsertIndexes(System.Int32,System.Int32)">
            <summary>
            Inserts multiple indexes into the table.  This does not alter Values in the table
            </summary>
            <param name="startIndex">first index to insert</param>
            <param name="count">total number of indexes to insert</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.InsertIndexesAndValues(System.Int32,System.Int32,`0)">
            <summary>
            Inserts multiple indexes into the table with the given value 
            </summary>
            <param name="startIndex">Index to insert first value</param>
            <param name="count">Total number of values to insert (must be greater than 0)</param>
            <param name="value">Value to insert</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.RemoveIndex(System.Int32)">
            <summary>
            Removes an index from the table.  This does not alter Values in the table
            </summary>
            <param name="index">index to remove</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.RemoveIndexAndValue(System.Int32)">
            <summary>
            Removes a value and its index from the table
            </summary>
            <param name="index">index to remove</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.RemoveIndexes(System.Int32,System.Int32)">
            <summary>
            Removes multiple indexes from the table.  This does not alter Values in the table
            </summary>
            <param name="startIndex">first index to remove</param>
            <param name="count">total number of indexes to remove</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.RemoveIndexesAndValues(System.Int32,System.Int32)">
            <summary>
            Removes multiple values and their indexes from the table
            </summary>
            <param name="startIndex">first index to remove</param>
            <param name="count">total number of indexes to remove</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.RemoveValue(System.Int32)">
            <summary>
            Removes a value from the table at the given index.  This does not alter other indexes in the table.
            </summary>
            <param name="index">index where value should be removed</param>
        </member>
        <member name="M:Avalonia.Controls.IndexToValueTable`1.RemoveValues(System.Int32,System.Int32)">
            <summary>
            Removes multiple values from the table.  This does not alter other indexes in the table.
            </summary>
            <param name="startIndex">first index where values should be removed </param>
            <param name="count">total number of values to remove</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.FindIndexerInMembers(System.Reflection.MemberInfo[],System.String,System.Object[]@)">
            <summary>
            Finds an int or string indexer in the specified collection of members, where int indexers take priority
            over string indexers.  If found, this method will return the associated PropertyInfo and set the out index
            argument to its appropriate value.  If not found, the return value will be null, as will the index.
            </summary>
            <param name="members">Collection of members to search through for an indexer.</param>
            <param name="stringIndex">String value of indexer argument.</param>
            <param name="index">Resultant index value.</param>
            <returns>Indexer PropertyInfo if found, null otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetDefaultMemberName(System.Type)">
            <summary>
            Gets the default member name that is used for an indexer (e.g. "Item").
            </summary>
            <param name="type">Type to check.</param>
            <returns>Default member name.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetDisplayName(System.Type,System.String)">
            <summary>
            Finds the PropertyInfo for the specified property path within this Type, and returns
            the value of GetShortName on its DisplayAttribute, if one exists. GetShortName will return
            the value of Name if there is no ShortName specified.
            </summary>
            <param name="type">Type to search</param>
            <param name="propertyPath">property path</param>
            <returns>DisplayAttribute.ShortName if it exists, null otherwise</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetNestedProperty(System.Type,System.String,System.Exception@,System.Object@)">
            <summary>
            Retrieves the value and type of a property. That property can be nested and its path
            can include indexers. Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">The parent Type</param>
            <param name="propertyPath">Property path</param>
            <param name="exception">Potential exception</param>
            <param name="item">Parent item which will be set to the property value if non-null.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetNestedProperty(System.Type,System.String,System.Object@)">
            <summary>
            Finds the leaf PropertyInfo for the specified property path, and returns its value
            if the item is non-null.
            </summary>
            <param name="parentType">Type to search.</param>
            <param name="propertyPath">Property path.</param>
            <param name="item">Parent item which will be set to the property value if non-null.</param>
            <returns>The PropertyInfo.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Returns the friendly name for a type
            </summary>
            <param name="type">The type to get the name from</param>
            <returns>Textual representation of the input type</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Type,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested and its path can
            include indexers. Each element of the path needs to be a public instance property.
            The return value will either be of type propertyType or it will be null.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="propertyType">Property type</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetNestedPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a given property path on a particular data item.
            </summary>
            <param name="item">Parent data item.</param>
            <param name="propertyPath">Property path.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetPropertyOrIndexer(System.Type,System.String,System.Object[]@)">
            <summary>
            Returns the PropertyInfo for the specified property path.  If the property path
            refers to an indexer (e.g. "[abc]"), then the index out parameter will be set to the value
            specified in the property path.  This method only supports indexers with a single parameter
            that is either an int or a string.  Int parameters take priority over string parameters.
            </summary>
            <param name="type">Type to search.</param>
            <param name="propertyPath">Property path.</param>
            <param name="index">Set to the index if return value is an indexer, otherwise null.</param>
            <returns>PropertyInfo for either a property or an indexer.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.PrependDefaultMemberName(System.Object,System.String)">
            <summary>
            If the specified property is an indexer, this method will prepend the object's
            default member name to it (e.g. "[foo]" returns "Item[foo]").
            </summary>
            <param name="item">Declaring data item.</param>
            <param name="property">Property name.</param>
            <returns>Property with default member name prepended, or property if unchanged.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.RemoveDefaultMemberName(System.String)">
            <summary>
            If the specified property is an indexer, this method will remove the object's
            default member name from it (e.g. "Item[foo]" returns "[foo]").
            </summary>
            <param name="property">Property name.</param>
            <returns>Property with default member name removed, or property if unchanged.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.SplitPropertyPath(System.String)">
            <summary>
            Returns a list of substrings where each one represents a single property within a nested
            property path which may include indexers.  For example, the string "abc.d[efg][h].ijk"
            would return the substrings: "abc", "d", "[efg]", "[h]", and "ijk".
            </summary>
            <param name="propertyPath">Path to split.</param>
            <returns>List of property substrings.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TypeHelper.GetIsReadOnly(System.Reflection.MemberInfo)">
            <summary>
            Checks a MemberInfo object (e.g. a Type or PropertyInfo) for the ReadOnly attribute
            and returns the value of IsReadOnly if it exists.
            </summary>
            <param name="memberInfo">MemberInfo to check</param>
            <returns>true if MemberInfo is read-only, false otherwise</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TreeHelper.ContainsChild(Avalonia.Visual,Avalonia.Visual)">
            <summary>
            Walks the visual tree to determine if a particular child is contained within a parent Visual.
            </summary>
            <param name="element">Parent Visual</param>
            <param name="child">Child Visual</param>
            <returns>True if the parent element contains the child</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.TreeHelper.ContainsFocusedElement(Avalonia.Visual)">
            <summary>
            Walks the visual tree to determine if the currently focused element is contained within
            a parent AvaloniaObject.  The FocusManager's Current property is used to determine
            the currently focused element, which is updated synchronously.
            </summary>
            <param name="element">Parent Visual</param>
            <returns>True if the currently focused element is within the visual tree of the parent</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.ValidationUtil.ContainsMemberName(System.ComponentModel.DataAnnotations.ValidationResult,System.String)">
            <summary>
            Searches a ValidationResult for the specified target member name.  If the target is null
            or empty, this method will return true if there are no member names at all.
            </summary>
            <param name="validationResult">ValidationResult to search.</param>
            <param name="target">Member name to search for.</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.ValidationUtil.FindEqualValidationResult(System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Finds an equivalent ValidationResult if one exists.
            </summary>
            <param name="collection">ValidationResults to search through.</param>
            <param name="target">ValidationResult to find.</param>
            <returns>Equal ValidationResult if found, null otherwise.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.ValidationUtil.ContainsEqualValidationResult(System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Determines whether the collection contains an equivalent ValidationResult
            </summary>
            <param name="collection">ValidationResults to search through</param>
            <param name="target">ValidationResult to search for</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.ValidationUtil.AddIfNew(System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Adds a new ValidationResult to the collection if an equivalent does not exist.
            </summary>
            <param name="collection">ValidationResults to search through</param>
            <param name="value">ValidationResult to add</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.ValidationUtil.CatchNonCriticalExceptions(System.Action)">
            <summary>
            Performs an action and catches any non-critical exceptions.
            </summary>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.ValidationUtil.IsCriticalException(System.Exception)">
            <summary>
            Determines if the specified exception is un-recoverable.
            </summary>
            <param name="exception">The exception.</param>
            <returns>True if the process cannot be recovered from the exception.</returns>
        </member>
    </members>
</doc>
